import "../timer.thingml"

datatype JThread
@java_type "Thread";

// Manage a set of software timers.
thing TimerJava includes Timer
@pim "Timer"
@platform "java"
{
    property timer : JThread

    statechart SoftTimer init default {
        state default {

          internal start
            event m : timer?timer_start
            guard m.delay > 0
            action do
             if (not(timer == 'null')) do
                '' & timer & '.interrupt();'
             end
             'Thread t = new Thread(){
                public void run() {
				try {
					Thread.sleep(' & m.delay & ');'
					timer!timer_timeout()
				'} catch (Exception ex) {
				}
				interrupt();
			    }
              };'
             timer = 't' 
              '' & timer & '.start();'                
            end
            
          internal cancel
            event m : timer?timer_cancel
            action do
              if (not(timer == 'null')) do
                '' & timer & '.interrupt();'
              end
            end
        }
    }
}

/**
 * In this configuration, we only have a timer.
 * Generate the Java code and execute it...
 * It should do pretty much nothing (since no one is asking the timer to 
 * start and no one is waiting for a timer timeout).
 * In this exercice, we will use the public API generated for the timer
 * and programmatically use the timer from a simple Java program.
 * 
 * Once you have generated the code, go into org.thingml.generated.Main and:
 * - register a listener on TimerJava_Deployment0_timer
 
 * Java code to insert in the main
 * TimerJava_Deployment0_timer.registerOnTimer(new ITimerJava_timerClient() {
        @Override
        public void timer_timeout_from_timer() {
            DO SOMETHING (like a println)
        }
   });
   
   - send a timer_start message to the timer (after the timer has been initialized)
   Java code to insert in the main
   TimerJava_Deployment0_timer.timer_start_via_timer((short)2000);
   
 You can now run your updated main, and after 2 seconds, your code should be called
   
*/

configuration Deployment0 {
    instance timer : TimerJava
}


/**

Now, we will wrap different ThingML configurations into Kevoree/Java components
The automated wrapping basically uses the public APIs generated.


In this configuration, all the things are already connected.
Everything will be managed by ThingML, resulting in a single Kevoree 
component, with no exposed port.
The dynamic adaptation capabilities of this configuration will be limited
to changing the value of parameters. It is not possible to change the way
timer and client will communicate, or to replace the client by an alternative client. 
*/
/*configuration Deployment1 {
    instance timer : TimerJava
    instance client : SimpleTimerClient
    connector client.timer => timer.timer    
}*/



/**
In this configuration, none of the components is connected.
The logic of the components will be managed by ThingML and wrapped as
a single Kevoree component. All the communication logic will be left to Kevoree. 
In other words, the ports left unconnected in the ThingML configuration will be exposed
as Kevoree ports, that should be connected later on in your Kevoree model,
using channels.
The dynamic adaptation capabilities now include the ability to dynamically change the
way timer and client will communicate.
*/
/*configuration Deployment2{
    instance timer : TimerJava
    instance client : SimpleTimerClient 
}*/




/**
In this third deployment, we will use two ThingML configuration. 
Eeach configuration will be wrapped as a separate Kevoree component.
The dynamica adaptation capabilities now include the ability to manage the lifecycle
of both components individually (e.g. the client can be changed dynamically).
*/
/*configuration TimerJ {
    instance timer : TimerJava    
}

configuration TimerClientJ {
    instance client : SimpleTimerClient    
}*/