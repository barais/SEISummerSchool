import "../calculator.thingml"
import "../random.thingml"
import "../printer.thingml"

datatype JavaRandom
@java_type "java.util.Random";

thing RandomJava includes Random
{

    statechart Random init generate {
        state generate {
          internal waiting
            event random?request
            action random!answer('(int)(java.lang.Math.random() * ((100 - 0) + 1))','(int)(java.lang.Math.random() * ((100 - 0) + 1))')
        }
    }
}

thing JavaPrinter includes Printer {

	statechart behavior init greetings {
	
		state greetings {
			internal event p : Print?printOperation
			action do 
				'System.out.print(" Operation = " +' & p.op & ');' 
			end
			internal event p : Print?printResult
			action do 
				'System.out.println(" => Result = " + ' & p.rez & ' + " ");' 
			end
						internal event p : Print?parameterz
			action do 
				'System.out.println("\n\nParameters : param1 = " + ' & p.myparam1 & ' + " param2 = "+ ' & p.myparam2 & ' + " ");'
			end
		}
	
	}

}


datatype JThread
@java_type "Thread";

// Manage a set of software timers.
thing TimerJava includes Timer
@pim "Timer"
@platform "java"
{
    property timer : JThread

    statechart SoftTimer init default {
        state default {

          internal start
            event m : timer?timer_start
            guard m.delay > 0
            action do
             if (not(timer == 'null')) do
                '' & timer & '.interrupt();'
             end
             'Thread t = new Thread(){
                public void run() {
				try {
					Thread.sleep(' & m.delay & ');'
					timer!timer_timeout()
				'} catch (Exception ex) {
				}
				interrupt();
			    }
              };'
             timer = 't' 
              '' & timer & '.start();'                
            end
            
          internal cancel
            event m : timer?timer_cancel
            action do
              if (not(timer == 'null')) do
                '' & timer & '.interrupt();'
              end
            end
        }
    }
}

configuration calculatorCfg 
{

	instance client: calculatorClient
	instance server: calculatorServer
	instance printer: JavaPrinter
	instance timer : TimerJava
	instance rando : RandomJava
	
	connector client.addition => server.addition
	connector client.substraction => server.substraction
	connector client.division => server.division
	connector client.multiplication => server.multiplication
	connector client.timer => timer.timer
	connector printer.Print => client.Print
	connector printer.Print => server.Print
	connector client.random => rando.random


	
}