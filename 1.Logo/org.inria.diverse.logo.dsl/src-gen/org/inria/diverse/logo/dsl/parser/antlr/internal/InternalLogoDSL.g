/*
 * generated by Xtext
 */
grammar InternalLogoDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.inria.diverse.logo.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.inria.diverse.logo.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.inria.diverse.logo.dsl.services.LogoDSLGrammarAccess;

}

@parser::members {

 	private LogoDSLGrammarAccess grammarAccess;
 	
    public InternalLogoDSLParser(TokenStream input, LogoDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LogoProgram";	
   	}
   	
   	@Override
   	protected LogoDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLogoProgram
entryRuleLogoProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogoProgramRule()); }
	 iv_ruleLogoProgram=ruleLogoProgram 
	 { $current=$iv_ruleLogoProgram.current; } 
	 EOF 
;

// Rule LogoProgram
ruleLogoProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogoProgramAccess().getSentencesSENTENCEParserRuleCall_0()); 
	    }
		lv_sentences_0_0=ruleSENTENCE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogoProgramRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_0_0, 
        		"SENTENCE");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleSENTENCE
entryRuleSENTENCE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSENTENCERule()); }
	 iv_ruleSENTENCE=ruleSENTENCE 
	 { $current=$iv_ruleSENTENCE.current; } 
	 EOF 
;

// Rule SENTENCE
ruleSENTENCE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSENTENCEAccess().getMAKEParserRuleCall_0()); 
    }
    this_MAKE_0=ruleMAKE
    { 
        $current = $this_MAKE_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSENTENCEAccess().getCONTENTParserRuleCall_1()); 
    }
    this_CONTENT_1=ruleCONTENT
    { 
        $current = $this_CONTENT_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSENTENCEAccess().getPROCEDURE_CALLParserRuleCall_2()); 
    }
    this_PROCEDURE_CALL_2=rulePROCEDURE_CALL
    { 
        $current = $this_PROCEDURE_CALL_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSENTENCEAccess().getOPERATIONParserRuleCall_3()); 
    }
    this_OPERATION_3=ruleOPERATION
    { 
        $current = $this_OPERATION_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSENTENCEAccess().getCONTROL_SENTENCESParserRuleCall_4()); 
    }
    this_CONTROL_SENTENCES_4=ruleCONTROL_SENTENCES
    { 
        $current = $this_CONTROL_SENTENCES_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSENTENCEAccess().getMOVEParserRuleCall_5()); 
    }
    this_MOVE_5=ruleMOVE
    { 
        $current = $this_MOVE_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSENTENCEAccess().getDRAWING_SENTENCEParserRuleCall_6()); 
    }
    this_DRAWING_SENTENCE_6=ruleDRAWING_SENTENCE
    { 
        $current = $this_DRAWING_SENTENCE_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMOVE
entryRuleMOVE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMOVERule()); }
	 iv_ruleMOVE=ruleMOVE 
	 { $current=$iv_ruleMOVE.current; } 
	 EOF 
;

// Rule MOVE
ruleMOVE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMOVEAccess().getFORWARDParserRuleCall_0()); 
    }
    this_FORWARD_0=ruleFORWARD
    { 
        $current = $this_FORWARD_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMOVEAccess().getLEFTParserRuleCall_1()); 
    }
    this_LEFT_1=ruleLEFT
    { 
        $current = $this_LEFT_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMOVEAccess().getRIGHTParserRuleCall_2()); 
    }
    this_RIGHT_2=ruleRIGHT
    { 
        $current = $this_RIGHT_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMOVEAccess().getSET_XParserRuleCall_3()); 
    }
    this_SET_X_3=ruleSET_X
    { 
        $current = $this_SET_X_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMOVEAccess().getSET_YParserRuleCall_4()); 
    }
    this_SET_Y_4=ruleSET_Y
    { 
        $current = $this_SET_Y_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFORWARD
entryRuleFORWARD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFORWARDRule()); }
	 iv_ruleFORWARD=ruleFORWARD 
	 { $current=$iv_ruleFORWARD.current; } 
	 EOF 
;

// Rule FORWARD
ruleFORWARD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='FORWARD' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFORWARDAccess().getFORWARDKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFORWARDAccess().getAmountEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_amount_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFORWARDRule());
	        }
       		set(
       			$current, 
       			"amount",
        		lv_amount_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLEFT
entryRuleLEFT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLEFTRule()); }
	 iv_ruleLEFT=ruleLEFT 
	 { $current=$iv_ruleLEFT.current; } 
	 EOF 
;

// Rule LEFT
ruleLEFT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='LEFT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLEFTAccess().getLEFTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLEFTAccess().getAmountEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_amount_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLEFTRule());
	        }
       		set(
       			$current, 
       			"amount",
        		lv_amount_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRIGHT
entryRuleRIGHT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRIGHTRule()); }
	 iv_ruleRIGHT=ruleRIGHT 
	 { $current=$iv_ruleRIGHT.current; } 
	 EOF 
;

// Rule RIGHT
ruleRIGHT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RIGHT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRIGHTAccess().getRIGHTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRIGHTAccess().getAmountEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_amount_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRIGHTRule());
	        }
       		set(
       			$current, 
       			"amount",
        		lv_amount_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSET_X
entryRuleSET_X returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSET_XRule()); }
	 iv_ruleSET_X=ruleSET_X 
	 { $current=$iv_ruleSET_X.current; } 
	 EOF 
;

// Rule SET_X
ruleSET_X returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SETX' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSET_XAccess().getSETXKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSET_XAccess().getAmountEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_amount_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSET_XRule());
	        }
       		set(
       			$current, 
       			"amount",
        		lv_amount_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSET_Y
entryRuleSET_Y returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSET_YRule()); }
	 iv_ruleSET_Y=ruleSET_Y 
	 { $current=$iv_ruleSET_Y.current; } 
	 EOF 
;

// Rule SET_Y
ruleSET_Y returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SETY' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSET_YAccess().getSETYKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSET_YAccess().getAmountEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_amount_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSET_YRule());
	        }
       		set(
       			$current, 
       			"amount",
        		lv_amount_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDRAWING_SENTENCE
entryRuleDRAWING_SENTENCE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDRAWING_SENTENCERule()); }
	 iv_ruleDRAWING_SENTENCE=ruleDRAWING_SENTENCE 
	 { $current=$iv_ruleDRAWING_SENTENCE.current; } 
	 EOF 
;

// Rule DRAWING_SENTENCE
ruleDRAWING_SENTENCE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDRAWING_SENTENCEAccess().getPENDOWNParserRuleCall_0()); 
    }
    this_PENDOWN_0=rulePENDOWN
    { 
        $current = $this_PENDOWN_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDRAWING_SENTENCEAccess().getPENUPParserRuleCall_1()); 
    }
    this_PENUP_1=rulePENUP
    { 
        $current = $this_PENUP_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDRAWING_SENTENCEAccess().getCLEARParserRuleCall_2()); 
    }
    this_CLEAR_2=ruleCLEAR
    { 
        $current = $this_CLEAR_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDRAWING_SENTENCEAccess().getHOMEParserRuleCall_3()); 
    }
    this_HOME_3=ruleHOME
    { 
        $current = $this_HOME_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDRAWING_SENTENCEAccess().getCOLOREABLEParserRuleCall_4()); 
    }
    this_COLOREABLE_4=ruleCOLOREABLE
    { 
        $current = $this_COLOREABLE_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDRAWING_SENTENCEAccess().getFONT_SPECParserRuleCall_5()); 
    }
    this_FONT_SPEC_5=ruleFONT_SPEC
    { 
        $current = $this_FONT_SPEC_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDRAWING_SENTENCEAccess().getDRAW_STRINGParserRuleCall_6()); 
    }
    this_DRAW_STRING_6=ruleDRAW_STRING
    { 
        $current = $this_DRAW_STRING_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePENDOWN
entryRulePENDOWN returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPENDOWNRule()); }
	 iv_rulePENDOWN=rulePENDOWN 
	 { $current=$iv_rulePENDOWN.current; } 
	 EOF 
;

// Rule PENDOWN
rulePENDOWN returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPENDOWNAccess().getPENDOWNAction_0(),
            $current);
    }
)	otherlv_1='PENDOWN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPENDOWNAccess().getPENDOWNKeyword_1());
    }
)
;





// Entry rule entryRulePENUP
entryRulePENUP returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPENUPRule()); }
	 iv_rulePENUP=rulePENUP 
	 { $current=$iv_rulePENUP.current; } 
	 EOF 
;

// Rule PENUP
rulePENUP returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPENUPAccess().getPENUPAction_0(),
            $current);
    }
)	otherlv_1='PENUP' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPENUPAccess().getPENUPKeyword_1());
    }
)
;





// Entry rule entryRuleCOLOREABLE
entryRuleCOLOREABLE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOLOREABLERule()); }
	 iv_ruleCOLOREABLE=ruleCOLOREABLE 
	 { $current=$iv_ruleCOLOREABLE.current; } 
	 EOF 
;

// Rule COLOREABLE
ruleCOLOREABLE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCOLOREABLEAccess().getPENCOLORParserRuleCall_0()); 
    }
    this_PENCOLOR_0=rulePENCOLOR
    { 
        $current = $this_PENCOLOR_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCOLOREABLEAccess().getCANVAS_COLORParserRuleCall_1()); 
    }
    this_CANVAS_COLOR_1=ruleCANVAS_COLOR
    { 
        $current = $this_CANVAS_COLOR_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePENCOLOR
entryRulePENCOLOR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPENCOLORRule()); }
	 iv_rulePENCOLOR=rulePENCOLOR 
	 { $current=$iv_rulePENCOLOR.current; } 
	 EOF 
;

// Rule PENCOLOR
rulePENCOLOR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PENCOLOR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPENCOLORAccess().getPENCOLORKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPENCOLORAccess().getColorCOLORParserRuleCall_1_0_0()); 
	    }
		lv_color_1_0=ruleCOLOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPENCOLORRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_1_0, 
        		"COLOR");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPENCOLORAccess().getColorSpecCOLOR_SPECParserRuleCall_1_1_0()); 
	    }
		lv_colorSpec_2_0=ruleCOLOR_SPEC		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPENCOLORRule());
	        }
       		set(
       			$current, 
       			"colorSpec",
        		lv_colorSpec_2_0, 
        		"COLOR_SPEC");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleCANVAS_COLOR
entryRuleCANVAS_COLOR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCANVAS_COLORRule()); }
	 iv_ruleCANVAS_COLOR=ruleCANVAS_COLOR 
	 { $current=$iv_ruleCANVAS_COLOR.current; } 
	 EOF 
;

// Rule CANVAS_COLOR
ruleCANVAS_COLOR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CANVASCOLOR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCANVAS_COLORAccess().getCANVASCOLORKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCANVAS_COLORAccess().getColorCOLORParserRuleCall_1_0_0()); 
	    }
		lv_color_1_0=ruleCOLOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCANVAS_COLORRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_1_0, 
        		"COLOR");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCANVAS_COLORAccess().getColorSpecCOLOR_SPECParserRuleCall_1_1_0()); 
	    }
		lv_colorSpec_2_0=ruleCOLOR_SPEC		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCANVAS_COLORRule());
	        }
       		set(
       			$current, 
       			"colorSpec",
        		lv_colorSpec_2_0, 
        		"COLOR_SPEC");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleCOLOR_SPEC
entryRuleCOLOR_SPEC returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOLOR_SPECRule()); }
	 iv_ruleCOLOR_SPEC=ruleCOLOR_SPEC 
	 { $current=$iv_ruleCOLOR_SPEC.current; } 
	 EOF 
;

// Rule COLOR_SPEC
ruleCOLOR_SPEC returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCOLOR_SPECAccess().getRedEXPRESSIONParserRuleCall_0_0()); 
	    }
		lv_red_0_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOLOR_SPECRule());
	        }
       		set(
       			$current, 
       			"red",
        		lv_red_0_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCOLOR_SPECAccess().getGreenEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_green_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOLOR_SPECRule());
	        }
       		set(
       			$current, 
       			"green",
        		lv_green_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCOLOR_SPECAccess().getBlueEXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_blue_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOLOR_SPECRule());
	        }
       		set(
       			$current, 
       			"blue",
        		lv_blue_2_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCOLOR_SPECAccess().getAlphaEXPRESSIONParserRuleCall_3_0()); 
	    }
		lv_alpha_3_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOLOR_SPECRule());
	        }
       		set(
       			$current, 
       			"alpha",
        		lv_alpha_3_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCOLOR
entryRuleCOLOR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOLORRule()); } 
	 iv_ruleCOLOR=ruleCOLOR 
	 { $current=$iv_ruleCOLOR.current.getText(); }  
	 EOF 
;

// Rule COLOR
ruleCOLOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='BLACK' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getBLACKKeyword_0()); 
    }

    |
	kw='BLUE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getBLUEKeyword_1()); 
    }

    |
	kw='CYAN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getCYANKeyword_2()); 
    }

    |
	kw='DARK GRAY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getDARKGRAYKeyword_3()); 
    }

    |
	kw='GRAY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getGRAYKeyword_4()); 
    }

    |
	kw='GREEN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getGREENKeyword_5()); 
    }

    |
	kw='LIGHTGRAY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getLIGHTGRAYKeyword_6()); 
    }

    |
	kw='MAGENTA' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getMAGENTAKeyword_7()); 
    }

    |
	kw='ORANGE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getORANGEKeyword_8()); 
    }

    |
	kw='PINK' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getPINKKeyword_9()); 
    }

    |
	kw='RED' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getREDKeyword_10()); 
    }

    |
	kw='WHITE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getWHITEKeyword_11()); 
    }

    |
	kw='YELLOW' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLORAccess().getYELLOWKeyword_12()); 
    }
)
    ;





// Entry rule entryRuleFONT_SPEC
entryRuleFONT_SPEC returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFONT_SPECRule()); }
	 iv_ruleFONT_SPEC=ruleFONT_SPEC 
	 { $current=$iv_ruleFONT_SPEC.current; } 
	 EOF 
;

// Rule FONT_SPEC
ruleFONT_SPEC returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFONT_SPECAccess().getFONT_STYLEParserRuleCall()); 
    }
    this_FONT_STYLE_0=ruleFONT_STYLE
    { 
        $current = $this_FONT_STYLE_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleFONT_STYLE
entryRuleFONT_STYLE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFONT_STYLERule()); }
	 iv_ruleFONT_STYLE=ruleFONT_STYLE 
	 { $current=$iv_ruleFONT_STYLE.current; } 
	 EOF 
;

// Rule FONT_STYLE
ruleFONT_STYLE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='FONTSTYLE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFONT_STYLEAccess().getFONTSTYLEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFONT_STYLEAccess().getStyleFontStyleValuesParserRuleCall_1_0()); 
	    }
		lv_style_1_0=ruleFontStyleValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFONT_STYLERule());
	        }
       		set(
       			$current, 
       			"style",
        		lv_style_1_0, 
        		"FontStyleValues");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFontStyleValues
entryRuleFontStyleValues returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFontStyleValuesRule()); }
	 iv_ruleFontStyleValues=ruleFontStyleValues 
	 { $current=$iv_ruleFontStyleValues.current; } 
	 EOF 
;

// Rule FontStyleValues
ruleFontStyleValues returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFontStyleValuesAccess().getBOLDAction_0_0(),
            $current);
    }
)	otherlv_1='BOLD' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFontStyleValuesAccess().getBOLDKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFontStyleValuesAccess().getITALICAction_1_0(),
            $current);
    }
)	otherlv_3='ITALIC' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFontStyleValuesAccess().getITALICKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFontStyleValuesAccess().getPLAINAction_2_0(),
            $current);
    }
)	otherlv_5='PLAIN' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFontStyleValuesAccess().getPLAINKeyword_2_1());
    }
))
;





// Entry rule entryRuleCLEAR
entryRuleCLEAR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCLEARRule()); }
	 iv_ruleCLEAR=ruleCLEAR 
	 { $current=$iv_ruleCLEAR.current; } 
	 EOF 
;

// Rule CLEAR
ruleCLEAR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCLEARAccess().getCLEARAction_0(),
            $current);
    }
)	otherlv_1='CLEAR' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCLEARAccess().getCLEARKeyword_1());
    }
)
;





// Entry rule entryRuleHOME
entryRuleHOME returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHOMERule()); }
	 iv_ruleHOME=ruleHOME 
	 { $current=$iv_ruleHOME.current; } 
	 EOF 
;

// Rule HOME
ruleHOME returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHOMEAccess().getHOMEAction_0(),
            $current);
    }
)	otherlv_1='HOME' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHOMEAccess().getHOMEKeyword_1());
    }
)
;





// Entry rule entryRuleDRAW_STRING
entryRuleDRAW_STRING returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDRAW_STRINGRule()); }
	 iv_ruleDRAW_STRING=ruleDRAW_STRING 
	 { $current=$iv_ruleDRAW_STRING.current; } 
	 EOF 
;

// Rule DRAW_STRING
ruleDRAW_STRING returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DRAWSTRING' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDRAW_STRINGAccess().getDRAWSTRINGKeyword_0());
    }
(
(
		lv_text_1_0=RULE_STRING
		{
			newLeafNode(lv_text_1_0, grammarAccess.getDRAW_STRINGAccess().getTextSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDRAW_STRINGRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"STRING");
	    }

)
))
;







// Entry rule entryRuleMAKE
entryRuleMAKE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMAKERule()); }
	 iv_ruleMAKE=ruleMAKE 
	 { $current=$iv_ruleMAKE.current; } 
	 EOF 
;

// Rule MAKE
ruleMAKE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MAKE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMAKEAccess().getMAKEKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMAKEAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMAKERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMAKEAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMAKEAccess().getValueEXPRESSIONParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMAKERule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVARIABLE_REF
entryRuleVARIABLE_REF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVARIABLE_REFRule()); }
	 iv_ruleVARIABLE_REF=ruleVARIABLE_REF 
	 { $current=$iv_ruleVARIABLE_REF.current; } 
	 EOF 
;

// Rule VARIABLE_REF
ruleVARIABLE_REF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVARIABLE_REFRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVARIABLE_REFAccess().getToVarREFERENCIABLECrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleEXPRESSION
entryRuleEXPRESSION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRESSIONRule()); }
	 iv_ruleEXPRESSION=ruleEXPRESSION 
	 { $current=$iv_ruleEXPRESSION.current; } 
	 EOF 
;

// Rule EXPRESSION
ruleEXPRESSION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEXPRESSIONAccess().getVARIABLE_REFParserRuleCall_0()); 
    }
    this_VARIABLE_REF_0=ruleVARIABLE_REF
    { 
        $current = $this_VARIABLE_REF_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEXPRESSIONAccess().getVALUEParserRuleCall_1()); 
    }
    this_VALUE_1=ruleVALUE
    { 
        $current = $this_VALUE_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVALUE
entryRuleVALUE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVALUERule()); }
	 iv_ruleVALUE=ruleVALUE 
	 { $current=$iv_ruleVALUE.current; } 
	 EOF 
;

// Rule VALUE
ruleVALUE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_DOUBLE
		{
			newLeafNode(lv_val_0_0, grammarAccess.getVALUEAccess().getValDOUBLETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVALUERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"DOUBLE");
	    }

)
)
;





// Entry rule entryRuleCONTENT
entryRuleCONTENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCONTENTRule()); }
	 iv_ruleCONTENT=ruleCONTENT 
	 { $current=$iv_ruleCONTENT.current; } 
	 EOF 
;

// Rule CONTENT
ruleCONTENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CONTENT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCONTENTAccess().getCONTENTKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCONTENTRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getCONTENTAccess().getVarMAKECrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleOPERATION
entryRuleOPERATION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOPERATIONRule()); }
	 iv_ruleOPERATION=ruleOPERATION 
	 { $current=$iv_ruleOPERATION.current; } 
	 EOF 
;

// Rule OPERATION
ruleOPERATION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOPERATIONAccess().getSUMParserRuleCall_0()); 
    }
    this_SUM_0=ruleSUM
    { 
        $current = $this_SUM_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOPERATIONAccess().getSUBTRACTParserRuleCall_1()); 
    }
    this_SUBTRACT_1=ruleSUBTRACT
    { 
        $current = $this_SUBTRACT_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOPERATIONAccess().getMULTIPLYParserRuleCall_2()); 
    }
    this_MULTIPLY_2=ruleMULTIPLY
    { 
        $current = $this_MULTIPLY_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOPERATIONAccess().getDIVIDEParserRuleCall_3()); 
    }
    this_DIVIDE_3=ruleDIVIDE
    { 
        $current = $this_DIVIDE_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSUM
entryRuleSUM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSUMRule()); }
	 iv_ruleSUM=ruleSUM 
	 { $current=$iv_ruleSUM.current; } 
	 EOF 
;

// Rule SUM
ruleSUM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SUM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSUMAccess().getSUMKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSUMRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSUMAccess().getTargetVariableMAKECrossReference_1_0()); 
	}

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSUMAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSUMAccess().getValOneEXPRESSIONParserRuleCall_3_0()); 
	    }
		lv_valOne_3_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUMRule());
	        }
       		set(
       			$current, 
       			"valOne",
        		lv_valOne_3_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSUMAccess().getPlusSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSUMAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); 
	    }
		lv_valTwo_5_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUMRule());
	        }
       		set(
       			$current, 
       			"valTwo",
        		lv_valTwo_5_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSUBTRACT
entryRuleSUBTRACT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSUBTRACTRule()); }
	 iv_ruleSUBTRACT=ruleSUBTRACT 
	 { $current=$iv_ruleSUBTRACT.current; } 
	 EOF 
;

// Rule SUBTRACT
ruleSUBTRACT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SUBTRACT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSUBTRACTAccess().getSUBTRACTKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSUBTRACTRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSUBTRACTAccess().getTargetVariableMAKECrossReference_1_0()); 
	}

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSUBTRACTAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSUBTRACTAccess().getValOneEXPRESSIONParserRuleCall_3_0()); 
	    }
		lv_valOne_3_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBTRACTRule());
	        }
       		set(
       			$current, 
       			"valOne",
        		lv_valOne_3_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSUBTRACTAccess().getHyphenMinusKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSUBTRACTAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); 
	    }
		lv_valTwo_5_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSUBTRACTRule());
	        }
       		set(
       			$current, 
       			"valTwo",
        		lv_valTwo_5_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMULTIPLY
entryRuleMULTIPLY returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMULTIPLYRule()); }
	 iv_ruleMULTIPLY=ruleMULTIPLY 
	 { $current=$iv_ruleMULTIPLY.current; } 
	 EOF 
;

// Rule MULTIPLY
ruleMULTIPLY returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MULTIPLY' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMULTIPLYAccess().getMULTIPLYKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMULTIPLYRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getMULTIPLYAccess().getTargetVariableMAKECrossReference_1_0()); 
	}

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMULTIPLYAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMULTIPLYAccess().getValOneEXPRESSIONParserRuleCall_3_0()); 
	    }
		lv_valOne_3_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMULTIPLYRule());
	        }
       		set(
       			$current, 
       			"valOne",
        		lv_valOne_3_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMULTIPLYAccess().getAsteriskKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMULTIPLYAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); 
	    }
		lv_valTwo_5_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMULTIPLYRule());
	        }
       		set(
       			$current, 
       			"valTwo",
        		lv_valTwo_5_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDIVIDE
entryRuleDIVIDE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDIVIDERule()); }
	 iv_ruleDIVIDE=ruleDIVIDE 
	 { $current=$iv_ruleDIVIDE.current; } 
	 EOF 
;

// Rule DIVIDE
ruleDIVIDE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DIVIDE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDIVIDEAccess().getDIVIDEKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDIVIDERule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDIVIDEAccess().getTargetVariableMAKECrossReference_1_0()); 
	}

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDIVIDEAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDIVIDEAccess().getValOneEXPRESSIONParserRuleCall_3_0()); 
	    }
		lv_valOne_3_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDIVIDERule());
	        }
       		set(
       			$current, 
       			"valOne",
        		lv_valOne_3_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDIVIDEAccess().getSolidusKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDIVIDEAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); 
	    }
		lv_valTwo_5_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDIVIDERule());
	        }
       		set(
       			$current, 
       			"valTwo",
        		lv_valTwo_5_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCONTROL_SENTENCES
entryRuleCONTROL_SENTENCES returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCONTROL_SENTENCESRule()); }
	 iv_ruleCONTROL_SENTENCES=ruleCONTROL_SENTENCES 
	 { $current=$iv_ruleCONTROL_SENTENCES.current; } 
	 EOF 
;

// Rule CONTROL_SENTENCES
ruleCONTROL_SENTENCES returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCONTROL_SENTENCESAccess().getREPEATParserRuleCall_0()); 
    }
    this_REPEAT_0=ruleREPEAT
    { 
        $current = $this_REPEAT_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCONTROL_SENTENCESAccess().getTOParserRuleCall_1()); 
    }
    this_TO_1=ruleTO
    { 
        $current = $this_TO_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCONTROL_SENTENCESAccess().getIF_SENTENCEParserRuleCall_2()); 
    }
    this_IF_SENTENCE_2=ruleIF_SENTENCE
    { 
        $current = $this_IF_SENTENCE_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleREPEAT
entryRuleREPEAT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getREPEATRule()); }
	 iv_ruleREPEAT=ruleREPEAT 
	 { $current=$iv_ruleREPEAT.current; } 
	 EOF 
;

// Rule REPEAT
ruleREPEAT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='REPEAT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getREPEATAccess().getREPEATKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getREPEATAccess().getTimesEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_times_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getREPEATRule());
	        }
       		set(
       			$current, 
       			"times",
        		lv_times_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getREPEATAccess().getCommandsSENTENCEParserRuleCall_2_0()); 
	    }
		lv_commands_2_0=ruleSENTENCE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getREPEATRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_2_0, 
        		"SENTENCE");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='END REPEAT' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getREPEATAccess().getENDREPEATKeyword_3());
    }
)
;





// Entry rule entryRuleTO
entryRuleTO returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTORule()); }
	 iv_ruleTO=ruleTO 
	 { $current=$iv_ruleTO.current; } 
	 EOF 
;

// Rule TO
ruleTO returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TO' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTOAccess().getTOKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTOAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTORule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTOAccess().getParametersPARAMParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=rulePARAM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTORule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"PARAM");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTOAccess().getCommandsSENTENCEParserRuleCall_3_0()); 
	    }
		lv_commands_3_0=ruleSENTENCE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTORule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_3_0, 
        		"SENTENCE");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='END TO' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTOAccess().getENDTOKeyword_4());
    }
)
;





// Entry rule entryRulePARAM
entryRulePARAM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPARAMRule()); }
	 iv_rulePARAM=rulePARAM 
	 { $current=$iv_rulePARAM.current; } 
	 EOF 
;

// Rule PARAM
rulePARAM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPARAMAccess().getColonKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPARAMAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPARAMRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulePROCEDURE_CALL
entryRulePROCEDURE_CALL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPROCEDURE_CALLRule()); }
	 iv_rulePROCEDURE_CALL=rulePROCEDURE_CALL 
	 { $current=$iv_rulePROCEDURE_CALL.current; } 
	 EOF 
;

// Rule PROCEDURE_CALL
rulePROCEDURE_CALL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPROCEDURE_CALLRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getPROCEDURE_CALLAccess().getToTOCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPROCEDURE_CALLAccess().getParamsEXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_params_1_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPROCEDURE_CALLRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleIF_SENTENCE
entryRuleIF_SENTENCE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIF_SENTENCERule()); }
	 iv_ruleIF_SENTENCE=ruleIF_SENTENCE 
	 { $current=$iv_ruleIF_SENTENCE.current; } 
	 EOF 
;

// Rule IF_SENTENCE
ruleIF_SENTENCE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='IF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIF_SENTENCEAccess().getIFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIF_SENTENCEAccess().getConditionBOOLEAN_EXPRESSIONParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleBOOLEAN_EXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIF_SENTENCERule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"BOOLEAN_EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIF_SENTENCEAccess().getCommandsSENTENCEParserRuleCall_2_0()); 
	    }
		lv_commands_2_0=ruleSENTENCE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIF_SENTENCERule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_2_0, 
        		"SENTENCE");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='END IF' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIF_SENTENCEAccess().getENDIFKeyword_3());
    }
)
;





// Entry rule entryRuleBOOLEAN_EXPRESSION
entryRuleBOOLEAN_EXPRESSION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEAN_EXPRESSIONRule()); }
	 iv_ruleBOOLEAN_EXPRESSION=ruleBOOLEAN_EXPRESSION 
	 { $current=$iv_ruleBOOLEAN_EXPRESSION.current; } 
	 EOF 
;

// Rule BOOLEAN_EXPRESSION
ruleBOOLEAN_EXPRESSION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getEQUALSParserRuleCall_0()); 
    }
    this_EQUALS_0=ruleEQUALS
    { 
        $current = $this_EQUALS_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getGREATER_THANParserRuleCall_1()); 
    }
    this_GREATER_THAN_1=ruleGREATER_THAN
    { 
        $current = $this_GREATER_THAN_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getLESSER_THANParserRuleCall_2()); 
    }
    this_LESSER_THAN_2=ruleLESSER_THAN
    { 
        $current = $this_LESSER_THAN_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEQUALS
entryRuleEQUALS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEQUALSRule()); }
	 iv_ruleEQUALS=ruleEQUALS 
	 { $current=$iv_ruleEQUALS.current; } 
	 EOF 
;

// Rule EQUALS
ruleEQUALS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEQUALSAccess().getOp1EXPRESSIONParserRuleCall_0_0()); 
	    }
		lv_op1_0_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEQUALSRule());
	        }
       		set(
       			$current, 
       			"op1",
        		lv_op1_0_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEQUALSAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEQUALSAccess().getOp2EXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_op2_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEQUALSRule());
	        }
       		set(
       			$current, 
       			"op2",
        		lv_op2_2_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGREATER_THAN
entryRuleGREATER_THAN returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGREATER_THANRule()); }
	 iv_ruleGREATER_THAN=ruleGREATER_THAN 
	 { $current=$iv_ruleGREATER_THAN.current; } 
	 EOF 
;

// Rule GREATER_THAN
ruleGREATER_THAN returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGREATER_THANAccess().getOp1EXPRESSIONParserRuleCall_0_0()); 
	    }
		lv_op1_0_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGREATER_THANRule());
	        }
       		set(
       			$current, 
       			"op1",
        		lv_op1_0_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGREATER_THANAccess().getGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGREATER_THANAccess().getOp2EXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_op2_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGREATER_THANRule());
	        }
       		set(
       			$current, 
       			"op2",
        		lv_op2_2_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLESSER_THAN
entryRuleLESSER_THAN returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLESSER_THANRule()); }
	 iv_ruleLESSER_THAN=ruleLESSER_THAN 
	 { $current=$iv_ruleLESSER_THAN.current; } 
	 EOF 
;

// Rule LESSER_THAN
ruleLESSER_THAN returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLESSER_THANAccess().getOp1EXPRESSIONParserRuleCall_0_0()); 
	    }
		lv_op1_0_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLESSER_THANRule());
	        }
       		set(
       			$current, 
       			"op1",
        		lv_op1_0_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLESSER_THANAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLESSER_THANAccess().getOp2EXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_op2_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLESSER_THANRule());
	        }
       		set(
       			$current, 
       			"op2",
        		lv_op2_2_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_DOUBLE : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


