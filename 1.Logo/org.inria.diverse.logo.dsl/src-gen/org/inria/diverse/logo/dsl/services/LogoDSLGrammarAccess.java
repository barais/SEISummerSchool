/*
 * generated by Xtext
 */
package org.inria.diverse.logo.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LogoDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LogoProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogoProgram");
		private final Assignment cSentencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentencesSENTENCEParserRuleCall_0 = (RuleCall)cSentencesAssignment.eContents().get(0);
		
		//LogoProgram:
		//	sentences+=SENTENCE*;
		@Override public ParserRule getRule() { return rule; }

		//sentences+=SENTENCE*
		public Assignment getSentencesAssignment() { return cSentencesAssignment; }

		//SENTENCE
		public RuleCall getSentencesSENTENCEParserRuleCall_0() { return cSentencesSENTENCEParserRuleCall_0; }
	}

	public class SENTENCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SENTENCE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMAKEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCONTENTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPROCEDURE_CALLParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOPERATIONParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCONTROL_SENTENCESParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMOVEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDRAWING_SENTENCEParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//SENTENCE: // VARIABLES
		//	MAKE | CONTENT | PROCEDURE_CALL | OPERATION | CONTROL_SENTENCES | MOVE | DRAWING_SENTENCE;
		@Override public ParserRule getRule() { return rule; }

		//// VARIABLES
		//MAKE | CONTENT | PROCEDURE_CALL | OPERATION | CONTROL_SENTENCES | MOVE | DRAWING_SENTENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		//// VARIABLES
		//MAKE
		public RuleCall getMAKEParserRuleCall_0() { return cMAKEParserRuleCall_0; }

		//CONTENT
		public RuleCall getCONTENTParserRuleCall_1() { return cCONTENTParserRuleCall_1; }

		//PROCEDURE_CALL
		public RuleCall getPROCEDURE_CALLParserRuleCall_2() { return cPROCEDURE_CALLParserRuleCall_2; }

		//OPERATION
		public RuleCall getOPERATIONParserRuleCall_3() { return cOPERATIONParserRuleCall_3; }

		//CONTROL_SENTENCES
		public RuleCall getCONTROL_SENTENCESParserRuleCall_4() { return cCONTROL_SENTENCESParserRuleCall_4; }

		//MOVE
		public RuleCall getMOVEParserRuleCall_5() { return cMOVEParserRuleCall_5; }

		//DRAWING_SENTENCE
		public RuleCall getDRAWING_SENTENCEParserRuleCall_6() { return cDRAWING_SENTENCEParserRuleCall_6; }
	}

	public class MOVEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MOVE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFORWARDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLEFTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRIGHTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSET_XParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSET_YParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MOVE:
		//	FORWARD | LEFT | RIGHT | SET_X | SET_Y;
		@Override public ParserRule getRule() { return rule; }

		//FORWARD | LEFT | RIGHT | SET_X | SET_Y
		public Alternatives getAlternatives() { return cAlternatives; }

		//FORWARD
		public RuleCall getFORWARDParserRuleCall_0() { return cFORWARDParserRuleCall_0; }

		//LEFT
		public RuleCall getLEFTParserRuleCall_1() { return cLEFTParserRuleCall_1; }

		//RIGHT
		public RuleCall getRIGHTParserRuleCall_2() { return cRIGHTParserRuleCall_2; }

		//SET_X
		public RuleCall getSET_XParserRuleCall_3() { return cSET_XParserRuleCall_3; }

		//SET_Y
		public RuleCall getSET_YParserRuleCall_4() { return cSET_YParserRuleCall_4; }
	}

	public class FORWARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FORWARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountEXPRESSIONParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//FORWARD:
		//	"FORWARD" amount=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"FORWARD" amount=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"FORWARD"
		public Keyword getFORWARDKeyword_0() { return cFORWARDKeyword_0; }

		//amount=EXPRESSION
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }

		//EXPRESSION
		public RuleCall getAmountEXPRESSIONParserRuleCall_1_0() { return cAmountEXPRESSIONParserRuleCall_1_0; }
	}

	public class LEFTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountEXPRESSIONParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//LEFT:
		//	"LEFT" amount=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"LEFT" amount=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"LEFT"
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }

		//amount=EXPRESSION
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }

		//EXPRESSION
		public RuleCall getAmountEXPRESSIONParserRuleCall_1_0() { return cAmountEXPRESSIONParserRuleCall_1_0; }
	}

	public class RIGHTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountEXPRESSIONParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//RIGHT:
		//	"RIGHT" amount=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"RIGHT" amount=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"RIGHT"
		public Keyword getRIGHTKeyword_0() { return cRIGHTKeyword_0; }

		//amount=EXPRESSION
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }

		//EXPRESSION
		public RuleCall getAmountEXPRESSIONParserRuleCall_1_0() { return cAmountEXPRESSIONParserRuleCall_1_0; }
	}

	public class SET_XElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SET_X");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSETXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountEXPRESSIONParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//SET_X:
		//	"SETX" amount=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"SETX" amount=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"SETX"
		public Keyword getSETXKeyword_0() { return cSETXKeyword_0; }

		//amount=EXPRESSION
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }

		//EXPRESSION
		public RuleCall getAmountEXPRESSIONParserRuleCall_1_0() { return cAmountEXPRESSIONParserRuleCall_1_0; }
	}

	public class SET_YElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SET_Y");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSETYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountEXPRESSIONParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//SET_Y:
		//	"SETY" amount=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"SETY" amount=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"SETY"
		public Keyword getSETYKeyword_0() { return cSETYKeyword_0; }

		//amount=EXPRESSION
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }

		//EXPRESSION
		public RuleCall getAmountEXPRESSIONParserRuleCall_1_0() { return cAmountEXPRESSIONParserRuleCall_1_0; }
	}

	public class DRAWING_SENTENCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DRAWING_SENTENCE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPENDOWNParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPENUPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCLEARParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHOMEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCOLOREABLEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFONT_SPECParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDRAW_STRINGParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//DRAWING_SENTENCE:
		//	PENDOWN | PENUP | CLEAR | HOME | COLOREABLE | FONT_SPEC | DRAW_STRING;
		@Override public ParserRule getRule() { return rule; }

		//PENDOWN | PENUP | CLEAR | HOME | COLOREABLE | FONT_SPEC | DRAW_STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//PENDOWN
		public RuleCall getPENDOWNParserRuleCall_0() { return cPENDOWNParserRuleCall_0; }

		//PENUP
		public RuleCall getPENUPParserRuleCall_1() { return cPENUPParserRuleCall_1; }

		//CLEAR
		public RuleCall getCLEARParserRuleCall_2() { return cCLEARParserRuleCall_2; }

		//HOME
		public RuleCall getHOMEParserRuleCall_3() { return cHOMEParserRuleCall_3; }

		//COLOREABLE
		public RuleCall getCOLOREABLEParserRuleCall_4() { return cCOLOREABLEParserRuleCall_4; }

		//FONT_SPEC
		public RuleCall getFONT_SPECParserRuleCall_5() { return cFONT_SPECParserRuleCall_5; }

		//DRAW_STRING
		public RuleCall getDRAW_STRINGParserRuleCall_6() { return cDRAW_STRINGParserRuleCall_6; }
	}

	public class PENDOWNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PENDOWN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPENDOWNAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPENDOWNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PENDOWN:
		//	{PENDOWN} "PENDOWN";
		@Override public ParserRule getRule() { return rule; }

		//{PENDOWN} "PENDOWN"
		public Group getGroup() { return cGroup; }

		//{PENDOWN}
		public Action getPENDOWNAction_0() { return cPENDOWNAction_0; }

		//"PENDOWN"
		public Keyword getPENDOWNKeyword_1() { return cPENDOWNKeyword_1; }
	}

	public class PENUPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PENUP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPENUPAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPENUPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PENUP:
		//	{PENUP} "PENUP";
		@Override public ParserRule getRule() { return rule; }

		//{PENUP} "PENUP"
		public Group getGroup() { return cGroup; }

		//{PENUP}
		public Action getPENUPAction_0() { return cPENUPAction_0; }

		//"PENUP"
		public Keyword getPENUPKeyword_1() { return cPENUPKeyword_1; }
	}

	public class COLOREABLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COLOREABLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPENCOLORParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCANVAS_COLORParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//COLOREABLE:
		//	PENCOLOR | CANVAS_COLOR;
		@Override public ParserRule getRule() { return rule; }

		//PENCOLOR | CANVAS_COLOR
		public Alternatives getAlternatives() { return cAlternatives; }

		//PENCOLOR
		public RuleCall getPENCOLORParserRuleCall_0() { return cPENCOLORParserRuleCall_0; }

		//CANVAS_COLOR
		public RuleCall getCANVAS_COLORParserRuleCall_1() { return cCANVAS_COLORParserRuleCall_1; }
	}

	public class PENCOLORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PENCOLOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPENCOLORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cColorCOLORParserRuleCall_1_0_0 = (RuleCall)cColorAssignment_1_0.eContents().get(0);
		private final Assignment cColorSpecAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cColorSpecCOLOR_SPECParserRuleCall_1_1_0 = (RuleCall)cColorSpecAssignment_1_1.eContents().get(0);
		
		//PENCOLOR:
		//	"PENCOLOR" (color=COLOR | colorSpec=COLOR_SPEC);
		@Override public ParserRule getRule() { return rule; }

		//"PENCOLOR" (color=COLOR | colorSpec=COLOR_SPEC)
		public Group getGroup() { return cGroup; }

		//"PENCOLOR"
		public Keyword getPENCOLORKeyword_0() { return cPENCOLORKeyword_0; }

		//color=COLOR | colorSpec=COLOR_SPEC
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//color=COLOR
		public Assignment getColorAssignment_1_0() { return cColorAssignment_1_0; }

		//COLOR
		public RuleCall getColorCOLORParserRuleCall_1_0_0() { return cColorCOLORParserRuleCall_1_0_0; }

		//colorSpec=COLOR_SPEC
		public Assignment getColorSpecAssignment_1_1() { return cColorSpecAssignment_1_1; }

		//COLOR_SPEC
		public RuleCall getColorSpecCOLOR_SPECParserRuleCall_1_1_0() { return cColorSpecCOLOR_SPECParserRuleCall_1_1_0; }
	}

	public class CANVAS_COLORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CANVAS_COLOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCANVASCOLORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cColorCOLORParserRuleCall_1_0_0 = (RuleCall)cColorAssignment_1_0.eContents().get(0);
		private final Assignment cColorSpecAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cColorSpecCOLOR_SPECParserRuleCall_1_1_0 = (RuleCall)cColorSpecAssignment_1_1.eContents().get(0);
		
		//CANVAS_COLOR:
		//	"CANVASCOLOR" (color=COLOR | colorSpec=COLOR_SPEC);
		@Override public ParserRule getRule() { return rule; }

		//"CANVASCOLOR" (color=COLOR | colorSpec=COLOR_SPEC)
		public Group getGroup() { return cGroup; }

		//"CANVASCOLOR"
		public Keyword getCANVASCOLORKeyword_0() { return cCANVASCOLORKeyword_0; }

		//color=COLOR | colorSpec=COLOR_SPEC
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//color=COLOR
		public Assignment getColorAssignment_1_0() { return cColorAssignment_1_0; }

		//COLOR
		public RuleCall getColorCOLORParserRuleCall_1_0_0() { return cColorCOLORParserRuleCall_1_0_0; }

		//colorSpec=COLOR_SPEC
		public Assignment getColorSpecAssignment_1_1() { return cColorSpecAssignment_1_1; }

		//COLOR_SPEC
		public RuleCall getColorSpecCOLOR_SPECParserRuleCall_1_1_0() { return cColorSpecCOLOR_SPECParserRuleCall_1_1_0; }
	}

	public class COLOR_SPECElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COLOR_SPEC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRedEXPRESSIONParserRuleCall_0_0 = (RuleCall)cRedAssignment_0.eContents().get(0);
		private final Assignment cGreenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGreenEXPRESSIONParserRuleCall_1_0 = (RuleCall)cGreenAssignment_1.eContents().get(0);
		private final Assignment cBlueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlueEXPRESSIONParserRuleCall_2_0 = (RuleCall)cBlueAssignment_2.eContents().get(0);
		private final Assignment cAlphaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlphaEXPRESSIONParserRuleCall_3_0 = (RuleCall)cAlphaAssignment_3.eContents().get(0);
		
		//COLOR_SPEC:
		//	red=EXPRESSION green=EXPRESSION blue=EXPRESSION alpha=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//red=EXPRESSION green=EXPRESSION blue=EXPRESSION alpha=EXPRESSION
		public Group getGroup() { return cGroup; }

		//red=EXPRESSION
		public Assignment getRedAssignment_0() { return cRedAssignment_0; }

		//EXPRESSION
		public RuleCall getRedEXPRESSIONParserRuleCall_0_0() { return cRedEXPRESSIONParserRuleCall_0_0; }

		//green=EXPRESSION
		public Assignment getGreenAssignment_1() { return cGreenAssignment_1; }

		//EXPRESSION
		public RuleCall getGreenEXPRESSIONParserRuleCall_1_0() { return cGreenEXPRESSIONParserRuleCall_1_0; }

		//blue=EXPRESSION
		public Assignment getBlueAssignment_2() { return cBlueAssignment_2; }

		//EXPRESSION
		public RuleCall getBlueEXPRESSIONParserRuleCall_2_0() { return cBlueEXPRESSIONParserRuleCall_2_0; }

		//alpha=EXPRESSION
		public Assignment getAlphaAssignment_3() { return cAlphaAssignment_3; }

		//EXPRESSION
		public RuleCall getAlphaEXPRESSIONParserRuleCall_3_0() { return cAlphaEXPRESSIONParserRuleCall_3_0; }
	}

	public class COLORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COLOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBLACKKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBLUEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCYANKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDARKGRAYKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGRAYKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGREENKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLIGHTGRAYKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMAGENTAKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cORANGEKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPINKKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cREDKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cWHITEKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cYELLOWKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//COLOR:
		//	"BLACK" | "BLUE" | "CYAN" | "DARK GRAY" | "GRAY" | "GREEN" | "LIGHTGRAY" | "MAGENTA" | "ORANGE" | "PINK" | "RED" |
		//	"WHITE" | "YELLOW";
		@Override public ParserRule getRule() { return rule; }

		//"BLACK" | "BLUE" | "CYAN" | "DARK GRAY" | "GRAY" | "GREEN" | "LIGHTGRAY" | "MAGENTA" | "ORANGE" | "PINK" | "RED" |
		//"WHITE" | "YELLOW"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"BLACK"
		public Keyword getBLACKKeyword_0() { return cBLACKKeyword_0; }

		//"BLUE"
		public Keyword getBLUEKeyword_1() { return cBLUEKeyword_1; }

		//"CYAN"
		public Keyword getCYANKeyword_2() { return cCYANKeyword_2; }

		//"DARK GRAY"
		public Keyword getDARKGRAYKeyword_3() { return cDARKGRAYKeyword_3; }

		//"GRAY"
		public Keyword getGRAYKeyword_4() { return cGRAYKeyword_4; }

		//"GREEN"
		public Keyword getGREENKeyword_5() { return cGREENKeyword_5; }

		//"LIGHTGRAY"
		public Keyword getLIGHTGRAYKeyword_6() { return cLIGHTGRAYKeyword_6; }

		//"MAGENTA"
		public Keyword getMAGENTAKeyword_7() { return cMAGENTAKeyword_7; }

		//"ORANGE"
		public Keyword getORANGEKeyword_8() { return cORANGEKeyword_8; }

		//"PINK"
		public Keyword getPINKKeyword_9() { return cPINKKeyword_9; }

		//"RED"
		public Keyword getREDKeyword_10() { return cREDKeyword_10; }

		//"WHITE"
		public Keyword getWHITEKeyword_11() { return cWHITEKeyword_11; }

		//"YELLOW"
		public Keyword getYELLOWKeyword_12() { return cYELLOWKeyword_12; }
	}

	public class FONT_SPECElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FONT_SPEC");
		private final RuleCall cFONT_STYLEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FONT_SPEC:
		//	FONT_STYLE;
		@Override public ParserRule getRule() { return rule; }

		//FONT_STYLE
		public RuleCall getFONT_STYLEParserRuleCall() { return cFONT_STYLEParserRuleCall; }
	}

	public class FONT_STYLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FONT_STYLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFONTSTYLEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStyleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStyleFontStyleValuesParserRuleCall_1_0 = (RuleCall)cStyleAssignment_1.eContents().get(0);
		
		//FONT_STYLE:
		//	"FONTSTYLE" style=FontStyleValues;
		@Override public ParserRule getRule() { return rule; }

		//"FONTSTYLE" style=FontStyleValues
		public Group getGroup() { return cGroup; }

		//"FONTSTYLE"
		public Keyword getFONTSTYLEKeyword_0() { return cFONTSTYLEKeyword_0; }

		//style=FontStyleValues
		public Assignment getStyleAssignment_1() { return cStyleAssignment_1; }

		//FontStyleValues
		public RuleCall getStyleFontStyleValuesParserRuleCall_1_0() { return cStyleFontStyleValuesParserRuleCall_1_0; }
	}

	public class FontStyleValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontStyleValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBOLDAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBOLDKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cITALICAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cITALICKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPLAINAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cPLAINKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//FontStyleValues:
		//	{BOLD} "BOLD" | {ITALIC} "ITALIC" | {PLAIN} "PLAIN";
		@Override public ParserRule getRule() { return rule; }

		//{BOLD} "BOLD" | {ITALIC} "ITALIC" | {PLAIN} "PLAIN"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BOLD} "BOLD"
		public Group getGroup_0() { return cGroup_0; }

		//{BOLD}
		public Action getBOLDAction_0_0() { return cBOLDAction_0_0; }

		//"BOLD"
		public Keyword getBOLDKeyword_0_1() { return cBOLDKeyword_0_1; }

		//{ITALIC} "ITALIC"
		public Group getGroup_1() { return cGroup_1; }

		//{ITALIC}
		public Action getITALICAction_1_0() { return cITALICAction_1_0; }

		//"ITALIC"
		public Keyword getITALICKeyword_1_1() { return cITALICKeyword_1_1; }

		//{PLAIN} "PLAIN"
		public Group getGroup_2() { return cGroup_2; }

		//{PLAIN}
		public Action getPLAINAction_2_0() { return cPLAINAction_2_0; }

		//"PLAIN"
		public Keyword getPLAINKeyword_2_1() { return cPLAINKeyword_2_1; }
	}

	public class CLEARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CLEAR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCLEARAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCLEARKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CLEAR:
		//	{CLEAR} "CLEAR";
		@Override public ParserRule getRule() { return rule; }

		//{CLEAR} "CLEAR"
		public Group getGroup() { return cGroup; }

		//{CLEAR}
		public Action getCLEARAction_0() { return cCLEARAction_0; }

		//"CLEAR"
		public Keyword getCLEARKeyword_1() { return cCLEARKeyword_1; }
	}

	public class HOMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HOME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHOMEAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHOMEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//HOME:
		//	{HOME} "HOME";
		@Override public ParserRule getRule() { return rule; }

		//{HOME} "HOME"
		public Group getGroup() { return cGroup; }

		//{HOME}
		public Action getHOMEAction_0() { return cHOMEAction_0; }

		//"HOME"
		public Keyword getHOMEKeyword_1() { return cHOMEKeyword_1; }
	}

	public class DRAW_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DRAW_STRING");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDRAWSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//DRAW_STRING:
		//	"DRAWSTRING" text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"DRAWSTRING" text=STRING
		public Group getGroup() { return cGroup; }

		//"DRAWSTRING"
		public Keyword getDRAWSTRINGKeyword_0() { return cDRAWSTRINGKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class REFERENCIABLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REFERENCIABLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMAKEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPARAMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//REFERENCIABLE:
		//	MAKE | PARAM;
		@Override public ParserRule getRule() { return rule; }

		//MAKE | PARAM
		public Alternatives getAlternatives() { return cAlternatives; }

		//MAKE
		public RuleCall getMAKEParserRuleCall_0() { return cMAKEParserRuleCall_0; }

		//PARAM
		public RuleCall getPARAMParserRuleCall_1() { return cPARAMParserRuleCall_1; }
	}

	public class MAKEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAKE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAKEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEXPRESSIONParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//MAKE:
		//	"MAKE" name=ID "=" value=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"MAKE" name=ID "=" value=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"MAKE"
		public Keyword getMAKEKeyword_0() { return cMAKEKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=EXPRESSION
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//EXPRESSION
		public RuleCall getValueEXPRESSIONParserRuleCall_3_0() { return cValueEXPRESSIONParserRuleCall_3_0; }
	}

	public class VARIABLE_REFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE_REF");
		private final Assignment cToVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cToVarREFERENCIABLECrossReference_0 = (CrossReference)cToVarAssignment.eContents().get(0);
		private final RuleCall cToVarREFERENCIABLEIDTerminalRuleCall_0_1 = (RuleCall)cToVarREFERENCIABLECrossReference_0.eContents().get(1);
		
		//VARIABLE_REF:
		//	toVar=[REFERENCIABLE];
		@Override public ParserRule getRule() { return rule; }

		//toVar=[REFERENCIABLE]
		public Assignment getToVarAssignment() { return cToVarAssignment; }

		//[REFERENCIABLE]
		public CrossReference getToVarREFERENCIABLECrossReference_0() { return cToVarREFERENCIABLECrossReference_0; }

		//ID
		public RuleCall getToVarREFERENCIABLEIDTerminalRuleCall_0_1() { return cToVarREFERENCIABLEIDTerminalRuleCall_0_1; }
	}

	public class EXPRESSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVARIABLE_REFParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVALUEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EXPRESSION:
		//	VARIABLE_REF | VALUE;
		@Override public ParserRule getRule() { return rule; }

		//VARIABLE_REF | VALUE
		public Alternatives getAlternatives() { return cAlternatives; }

		//VARIABLE_REF
		public RuleCall getVARIABLE_REFParserRuleCall_0() { return cVARIABLE_REFParserRuleCall_0; }

		//VALUE
		public RuleCall getVALUEParserRuleCall_1() { return cVALUEParserRuleCall_1; }
	}

	public class VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VALUE");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValDOUBLETerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//VALUE:
		//	val=DOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//val=DOUBLE
		public Assignment getValAssignment() { return cValAssignment; }

		//DOUBLE
		public RuleCall getValDOUBLETerminalRuleCall_0() { return cValDOUBLETerminalRuleCall_0; }
	}

	public class CONTENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CONTENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONTENTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarMAKECrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarMAKEIDTerminalRuleCall_1_0_1 = (RuleCall)cVarMAKECrossReference_1_0.eContents().get(1);
		
		//CONTENT:
		//	"CONTENT" var=[MAKE];
		@Override public ParserRule getRule() { return rule; }

		//"CONTENT" var=[MAKE]
		public Group getGroup() { return cGroup; }

		//"CONTENT"
		public Keyword getCONTENTKeyword_0() { return cCONTENTKeyword_0; }

		//var=[MAKE]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//[MAKE]
		public CrossReference getVarMAKECrossReference_1_0() { return cVarMAKECrossReference_1_0; }

		//ID
		public RuleCall getVarMAKEIDTerminalRuleCall_1_0_1() { return cVarMAKEIDTerminalRuleCall_1_0_1; }
	}

	public class OPERATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSUMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSUBTRACTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMULTIPLYParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDIVIDEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OPERATION:
		//	SUM | SUBTRACT | MULTIPLY | DIVIDE;
		@Override public ParserRule getRule() { return rule; }

		//SUM | SUBTRACT | MULTIPLY | DIVIDE
		public Alternatives getAlternatives() { return cAlternatives; }

		//SUM
		public RuleCall getSUMParserRuleCall_0() { return cSUMParserRuleCall_0; }

		//SUBTRACT
		public RuleCall getSUBTRACTParserRuleCall_1() { return cSUBTRACTParserRuleCall_1; }

		//MULTIPLY
		public RuleCall getMULTIPLYParserRuleCall_2() { return cMULTIPLYParserRuleCall_2; }

		//DIVIDE
		public RuleCall getDIVIDEParserRuleCall_3() { return cDIVIDEParserRuleCall_3; }
	}

	public class SUMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SUM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSUMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetVariableMAKECrossReference_1_0 = (CrossReference)cTargetVariableAssignment_1.eContents().get(0);
		private final RuleCall cTargetVariableMAKEIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetVariableMAKECrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValOneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValOneEXPRESSIONParserRuleCall_3_0 = (RuleCall)cValOneAssignment_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValTwoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValTwoEXPRESSIONParserRuleCall_5_0 = (RuleCall)cValTwoAssignment_5.eContents().get(0);
		
		//SUM:
		//	"SUM" targetVariable=[MAKE] "=" valOne=EXPRESSION "+" valTwo=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"SUM" targetVariable=[MAKE] "=" valOne=EXPRESSION "+" valTwo=EXPRESSION
		public Group getGroup() { return cGroup; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.29/@alternatives/@elements.0'
		public Keyword getSUMKeyword_0() { return cSUMKeyword_0; }

		//targetVariable=[MAKE]
		public Assignment getTargetVariableAssignment_1() { return cTargetVariableAssignment_1; }

		//[MAKE]
		public CrossReference getTargetVariableMAKECrossReference_1_0() { return cTargetVariableMAKECrossReference_1_0; }

		//ID
		public RuleCall getTargetVariableMAKEIDTerminalRuleCall_1_0_1() { return cTargetVariableMAKEIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//valOne=EXPRESSION
		public Assignment getValOneAssignment_3() { return cValOneAssignment_3; }

		//EXPRESSION
		public RuleCall getValOneEXPRESSIONParserRuleCall_3_0() { return cValOneEXPRESSIONParserRuleCall_3_0; }

		//"+"
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }

		//valTwo=EXPRESSION
		public Assignment getValTwoAssignment_5() { return cValTwoAssignment_5; }

		//EXPRESSION
		public RuleCall getValTwoEXPRESSIONParserRuleCall_5_0() { return cValTwoEXPRESSIONParserRuleCall_5_0; }
	}

	public class SUBTRACTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SUBTRACT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSUBTRACTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetVariableMAKECrossReference_1_0 = (CrossReference)cTargetVariableAssignment_1.eContents().get(0);
		private final RuleCall cTargetVariableMAKEIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetVariableMAKECrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValOneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValOneEXPRESSIONParserRuleCall_3_0 = (RuleCall)cValOneAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValTwoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValTwoEXPRESSIONParserRuleCall_5_0 = (RuleCall)cValTwoAssignment_5.eContents().get(0);
		
		//SUBTRACT:
		//	"SUBTRACT" targetVariable=[MAKE] "=" valOne=EXPRESSION "-" valTwo=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"SUBTRACT" targetVariable=[MAKE] "=" valOne=EXPRESSION "-" valTwo=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"SUBTRACT"
		public Keyword getSUBTRACTKeyword_0() { return cSUBTRACTKeyword_0; }

		//targetVariable=[MAKE]
		public Assignment getTargetVariableAssignment_1() { return cTargetVariableAssignment_1; }

		//[MAKE]
		public CrossReference getTargetVariableMAKECrossReference_1_0() { return cTargetVariableMAKECrossReference_1_0; }

		//ID
		public RuleCall getTargetVariableMAKEIDTerminalRuleCall_1_0_1() { return cTargetVariableMAKEIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//valOne=EXPRESSION
		public Assignment getValOneAssignment_3() { return cValOneAssignment_3; }

		//EXPRESSION
		public RuleCall getValOneEXPRESSIONParserRuleCall_3_0() { return cValOneEXPRESSIONParserRuleCall_3_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }

		//valTwo=EXPRESSION
		public Assignment getValTwoAssignment_5() { return cValTwoAssignment_5; }

		//EXPRESSION
		public RuleCall getValTwoEXPRESSIONParserRuleCall_5_0() { return cValTwoEXPRESSIONParserRuleCall_5_0; }
	}

	public class MULTIPLYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MULTIPLY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMULTIPLYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetVariableMAKECrossReference_1_0 = (CrossReference)cTargetVariableAssignment_1.eContents().get(0);
		private final RuleCall cTargetVariableMAKEIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetVariableMAKECrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValOneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValOneEXPRESSIONParserRuleCall_3_0 = (RuleCall)cValOneAssignment_3.eContents().get(0);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValTwoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValTwoEXPRESSIONParserRuleCall_5_0 = (RuleCall)cValTwoAssignment_5.eContents().get(0);
		
		//MULTIPLY:
		//	"MULTIPLY" targetVariable=[MAKE] "=" valOne=EXPRESSION "*" valTwo=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"MULTIPLY" targetVariable=[MAKE] "=" valOne=EXPRESSION "*" valTwo=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"MULTIPLY"
		public Keyword getMULTIPLYKeyword_0() { return cMULTIPLYKeyword_0; }

		//targetVariable=[MAKE]
		public Assignment getTargetVariableAssignment_1() { return cTargetVariableAssignment_1; }

		//[MAKE]
		public CrossReference getTargetVariableMAKECrossReference_1_0() { return cTargetVariableMAKECrossReference_1_0; }

		//ID
		public RuleCall getTargetVariableMAKEIDTerminalRuleCall_1_0_1() { return cTargetVariableMAKEIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//valOne=EXPRESSION
		public Assignment getValOneAssignment_3() { return cValOneAssignment_3; }

		//EXPRESSION
		public RuleCall getValOneEXPRESSIONParserRuleCall_3_0() { return cValOneEXPRESSIONParserRuleCall_3_0; }

		//"*"
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }

		//valTwo=EXPRESSION
		public Assignment getValTwoAssignment_5() { return cValTwoAssignment_5; }

		//EXPRESSION
		public RuleCall getValTwoEXPRESSIONParserRuleCall_5_0() { return cValTwoEXPRESSIONParserRuleCall_5_0; }
	}

	public class DIVIDEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIVIDE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDIVIDEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetVariableMAKECrossReference_1_0 = (CrossReference)cTargetVariableAssignment_1.eContents().get(0);
		private final RuleCall cTargetVariableMAKEIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetVariableMAKECrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValOneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValOneEXPRESSIONParserRuleCall_3_0 = (RuleCall)cValOneAssignment_3.eContents().get(0);
		private final Keyword cSolidusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValTwoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValTwoEXPRESSIONParserRuleCall_5_0 = (RuleCall)cValTwoAssignment_5.eContents().get(0);
		
		//DIVIDE:
		//	"DIVIDE" targetVariable=[MAKE] "=" valOne=EXPRESSION "/" valTwo=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//"DIVIDE" targetVariable=[MAKE] "=" valOne=EXPRESSION "/" valTwo=EXPRESSION
		public Group getGroup() { return cGroup; }

		//"DIVIDE"
		public Keyword getDIVIDEKeyword_0() { return cDIVIDEKeyword_0; }

		//targetVariable=[MAKE]
		public Assignment getTargetVariableAssignment_1() { return cTargetVariableAssignment_1; }

		//[MAKE]
		public CrossReference getTargetVariableMAKECrossReference_1_0() { return cTargetVariableMAKECrossReference_1_0; }

		//ID
		public RuleCall getTargetVariableMAKEIDTerminalRuleCall_1_0_1() { return cTargetVariableMAKEIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//valOne=EXPRESSION
		public Assignment getValOneAssignment_3() { return cValOneAssignment_3; }

		//EXPRESSION
		public RuleCall getValOneEXPRESSIONParserRuleCall_3_0() { return cValOneEXPRESSIONParserRuleCall_3_0; }

		//"/"
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }

		//valTwo=EXPRESSION
		public Assignment getValTwoAssignment_5() { return cValTwoAssignment_5; }

		//EXPRESSION
		public RuleCall getValTwoEXPRESSIONParserRuleCall_5_0() { return cValTwoEXPRESSIONParserRuleCall_5_0; }
	}

	public class CONTROL_SENTENCESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CONTROL_SENTENCES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cREPEATParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTOParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIF_SENTENCEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CONTROL_SENTENCES:
		//	REPEAT | TO | IF_SENTENCE;
		@Override public ParserRule getRule() { return rule; }

		//REPEAT | TO | IF_SENTENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		//REPEAT
		public RuleCall getREPEATParserRuleCall_0() { return cREPEATParserRuleCall_0; }

		//TO
		public RuleCall getTOParserRuleCall_1() { return cTOParserRuleCall_1; }

		//IF_SENTENCE
		public RuleCall getIF_SENTENCEParserRuleCall_2() { return cIF_SENTENCEParserRuleCall_2; }
	}

	public class REPEATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REPEAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREPEATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimesEXPRESSIONParserRuleCall_1_0 = (RuleCall)cTimesAssignment_1.eContents().get(0);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsSENTENCEParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cENDREPEATKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//REPEAT:
		//	"REPEAT" times=EXPRESSION commands+=SENTENCE+ "END REPEAT";
		@Override public ParserRule getRule() { return rule; }

		//"REPEAT" times=EXPRESSION commands+=SENTENCE+ "END REPEAT"
		public Group getGroup() { return cGroup; }

		//"REPEAT"
		public Keyword getREPEATKeyword_0() { return cREPEATKeyword_0; }

		//times=EXPRESSION
		public Assignment getTimesAssignment_1() { return cTimesAssignment_1; }

		//EXPRESSION
		public RuleCall getTimesEXPRESSIONParserRuleCall_1_0() { return cTimesEXPRESSIONParserRuleCall_1_0; }

		//commands+=SENTENCE+
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }

		//SENTENCE
		public RuleCall getCommandsSENTENCEParserRuleCall_2_0() { return cCommandsSENTENCEParserRuleCall_2_0; }

		//"END REPEAT"
		public Keyword getENDREPEATKeyword_3() { return cENDREPEATKeyword_3; }
	}

	public class TOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersPARAMParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsSENTENCEParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cENDTOKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// define una funcion/procedimiento
		//TO:
		//	"TO" name=ID parameters+=PARAM* commands+=SENTENCE+ "END TO";
		@Override public ParserRule getRule() { return rule; }

		//"TO" name=ID parameters+=PARAM* commands+=SENTENCE+ "END TO"
		public Group getGroup() { return cGroup; }

		//"TO"
		public Keyword getTOKeyword_0() { return cTOKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//parameters+=PARAM*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//PARAM
		public RuleCall getParametersPARAMParserRuleCall_2_0() { return cParametersPARAMParserRuleCall_2_0; }

		//commands+=SENTENCE+
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }

		//SENTENCE
		public RuleCall getCommandsSENTENCEParserRuleCall_3_0() { return cCommandsSENTENCEParserRuleCall_3_0; }

		//"END TO"
		public Keyword getENDTOKeyword_4() { return cENDTOKeyword_4; }
	}

	public class PARAMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PARAM:
		//	":" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//":" name=ID
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PROCEDURE_CALLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PROCEDURE_CALL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cToAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cToTOCrossReference_0_0 = (CrossReference)cToAssignment_0.eContents().get(0);
		private final RuleCall cToTOIDTerminalRuleCall_0_0_1 = (RuleCall)cToTOCrossReference_0_0.eContents().get(1);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsEXPRESSIONParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		//// llamada
		//PROCEDURE_CALL:
		//	to=[TO] params+=EXPRESSION*;
		@Override public ParserRule getRule() { return rule; }

		//to=[TO] params+=EXPRESSION*
		public Group getGroup() { return cGroup; }

		//to=[TO]
		public Assignment getToAssignment_0() { return cToAssignment_0; }

		//[TO]
		public CrossReference getToTOCrossReference_0_0() { return cToTOCrossReference_0_0; }

		//ID
		public RuleCall getToTOIDTerminalRuleCall_0_0_1() { return cToTOIDTerminalRuleCall_0_0_1; }

		//params+=EXPRESSION*
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//EXPRESSION
		public RuleCall getParamsEXPRESSIONParserRuleCall_1_0() { return cParamsEXPRESSIONParserRuleCall_1_0; }
	}

	public class IF_SENTENCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IF_SENTENCE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionBOOLEAN_EXPRESSIONParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsSENTENCEParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cENDIFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IF_SENTENCE:
		//	"IF" condition=BOOLEAN_EXPRESSION commands+=SENTENCE+ "END IF";
		@Override public ParserRule getRule() { return rule; }

		//"IF" condition=BOOLEAN_EXPRESSION commands+=SENTENCE+ "END IF"
		public Group getGroup() { return cGroup; }

		//"IF"
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }

		//condition=BOOLEAN_EXPRESSION
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//BOOLEAN_EXPRESSION
		public RuleCall getConditionBOOLEAN_EXPRESSIONParserRuleCall_1_0() { return cConditionBOOLEAN_EXPRESSIONParserRuleCall_1_0; }

		//commands+=SENTENCE+
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }

		//SENTENCE
		public RuleCall getCommandsSENTENCEParserRuleCall_2_0() { return cCommandsSENTENCEParserRuleCall_2_0; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.38/@alternatives/@elements.3'
		public Keyword getENDIFKeyword_3() { return cENDIFKeyword_3; }
	}

	public class BOOLEAN_EXPRESSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_EXPRESSION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEQUALSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGREATER_THANParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLESSER_THANParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#XtextFragmentProvider_org.inria.diverse.logo.dsl.LogoDSL/BOOLEAN_EXPRESSION'
		@Override public ParserRule getRule() { return rule; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.39/@alternatives'
		public Alternatives getAlternatives() { return cAlternatives; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.39/@alternatives/@elements.0'
		public RuleCall getEQUALSParserRuleCall_0() { return cEQUALSParserRuleCall_0; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.39/@alternatives/@elements.1'
		public RuleCall getGREATER_THANParserRuleCall_1() { return cGREATER_THANParserRuleCall_1; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.39/@alternatives/@elements.2'
		public RuleCall getLESSER_THANParserRuleCall_2() { return cLESSER_THANParserRuleCall_2; }
	}

	public class EQUALSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1EXPRESSIONParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2EXPRESSIONParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#XtextFragmentProvider_org.inria.diverse.logo.dsl.LogoDSL/EQUALS'
		@Override public ParserRule getRule() { return rule; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.40/@alternatives'
		public Group getGroup() { return cGroup; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.40/@alternatives/@elements.0'
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.40/@alternatives/@elements.0/@terminal'
		public RuleCall getOp1EXPRESSIONParserRuleCall_0_0() { return cOp1EXPRESSIONParserRuleCall_0_0; }

		//org.eclipse.xtext.resource.ClasspathUriResolutionException: org.eclipse.xtext.resource.FileNotFoundOnClasspathException: Couldn't find resource on classpath. URI was 'classpath:/org/inria/diverse/logo/dsl/LogoDSL.xtext#/0/@rules.40/@alternatives/@elements.1'
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//op2=EXPRESSION
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }

		//EXPRESSION
		public RuleCall getOp2EXPRESSIONParserRuleCall_2_0() { return cOp2EXPRESSIONParserRuleCall_2_0; }
	}

	public class GREATER_THANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER_THAN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1EXPRESSIONParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2EXPRESSIONParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//GREATER_THAN:
		//	op1=EXPRESSION ">" op2=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//op1=EXPRESSION ">" op2=EXPRESSION
		public Group getGroup() { return cGroup; }

		//op1=EXPRESSION
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }

		//EXPRESSION
		public RuleCall getOp1EXPRESSIONParserRuleCall_0_0() { return cOp1EXPRESSIONParserRuleCall_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//op2=EXPRESSION
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }

		//EXPRESSION
		public RuleCall getOp2EXPRESSIONParserRuleCall_2_0() { return cOp2EXPRESSIONParserRuleCall_2_0; }
	}

	public class LESSER_THANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LESSER_THAN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1EXPRESSIONParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2EXPRESSIONParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//LESSER_THAN:
		//	op1=EXPRESSION "<" op2=EXPRESSION;
		@Override public ParserRule getRule() { return rule; }

		//op1=EXPRESSION "<" op2=EXPRESSION
		public Group getGroup() { return cGroup; }

		//op1=EXPRESSION
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }

		//EXPRESSION
		public RuleCall getOp1EXPRESSIONParserRuleCall_0_0() { return cOp1EXPRESSIONParserRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//op2=EXPRESSION
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }

		//EXPRESSION
		public RuleCall getOp2EXPRESSIONParserRuleCall_2_0() { return cOp2EXPRESSIONParserRuleCall_2_0; }
	}
	
	
	private final LogoProgramElements pLogoProgram;
	private final SENTENCEElements pSENTENCE;
	private final MOVEElements pMOVE;
	private final FORWARDElements pFORWARD;
	private final LEFTElements pLEFT;
	private final RIGHTElements pRIGHT;
	private final SET_XElements pSET_X;
	private final SET_YElements pSET_Y;
	private final DRAWING_SENTENCEElements pDRAWING_SENTENCE;
	private final PENDOWNElements pPENDOWN;
	private final PENUPElements pPENUP;
	private final COLOREABLEElements pCOLOREABLE;
	private final PENCOLORElements pPENCOLOR;
	private final CANVAS_COLORElements pCANVAS_COLOR;
	private final COLOR_SPECElements pCOLOR_SPEC;
	private final COLORElements pCOLOR;
	private final FONT_SPECElements pFONT_SPEC;
	private final FONT_STYLEElements pFONT_STYLE;
	private final FontStyleValuesElements pFontStyleValues;
	private final CLEARElements pCLEAR;
	private final HOMEElements pHOME;
	private final DRAW_STRINGElements pDRAW_STRING;
	private final REFERENCIABLEElements pREFERENCIABLE;
	private final MAKEElements pMAKE;
	private final VARIABLE_REFElements pVARIABLE_REF;
	private final EXPRESSIONElements pEXPRESSION;
	private final VALUEElements pVALUE;
	private final CONTENTElements pCONTENT;
	private final OPERATIONElements pOPERATION;
	private final SUMElements pSUM;
	private final SUBTRACTElements pSUBTRACT;
	private final MULTIPLYElements pMULTIPLY;
	private final DIVIDEElements pDIVIDE;
	private final CONTROL_SENTENCESElements pCONTROL_SENTENCES;
	private final REPEATElements pREPEAT;
	private final TOElements pTO;
	private final PARAMElements pPARAM;
	private final PROCEDURE_CALLElements pPROCEDURE_CALL;
	private final IF_SENTENCEElements pIF_SENTENCE;
	private final BOOLEAN_EXPRESSIONElements pBOOLEAN_EXPRESSION;
	private final EQUALSElements pEQUALS;
	private final GREATER_THANElements pGREATER_THAN;
	private final LESSER_THANElements pLESSER_THAN;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LogoDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLogoProgram = new LogoProgramElements();
		this.pSENTENCE = new SENTENCEElements();
		this.pMOVE = new MOVEElements();
		this.pFORWARD = new FORWARDElements();
		this.pLEFT = new LEFTElements();
		this.pRIGHT = new RIGHTElements();
		this.pSET_X = new SET_XElements();
		this.pSET_Y = new SET_YElements();
		this.pDRAWING_SENTENCE = new DRAWING_SENTENCEElements();
		this.pPENDOWN = new PENDOWNElements();
		this.pPENUP = new PENUPElements();
		this.pCOLOREABLE = new COLOREABLEElements();
		this.pPENCOLOR = new PENCOLORElements();
		this.pCANVAS_COLOR = new CANVAS_COLORElements();
		this.pCOLOR_SPEC = new COLOR_SPECElements();
		this.pCOLOR = new COLORElements();
		this.pFONT_SPEC = new FONT_SPECElements();
		this.pFONT_STYLE = new FONT_STYLEElements();
		this.pFontStyleValues = new FontStyleValuesElements();
		this.pCLEAR = new CLEARElements();
		this.pHOME = new HOMEElements();
		this.pDRAW_STRING = new DRAW_STRINGElements();
		this.pREFERENCIABLE = new REFERENCIABLEElements();
		this.pMAKE = new MAKEElements();
		this.pVARIABLE_REF = new VARIABLE_REFElements();
		this.pEXPRESSION = new EXPRESSIONElements();
		this.pVALUE = new VALUEElements();
		this.pCONTENT = new CONTENTElements();
		this.pOPERATION = new OPERATIONElements();
		this.pSUM = new SUMElements();
		this.pSUBTRACT = new SUBTRACTElements();
		this.pMULTIPLY = new MULTIPLYElements();
		this.pDIVIDE = new DIVIDEElements();
		this.pCONTROL_SENTENCES = new CONTROL_SENTENCESElements();
		this.pREPEAT = new REPEATElements();
		this.pTO = new TOElements();
		this.pPARAM = new PARAMElements();
		this.pPROCEDURE_CALL = new PROCEDURE_CALLElements();
		this.pIF_SENTENCE = new IF_SENTENCEElements();
		this.pBOOLEAN_EXPRESSION = new BOOLEAN_EXPRESSIONElements();
		this.pEQUALS = new EQUALSElements();
		this.pGREATER_THAN = new GREATER_THANElements();
		this.pLESSER_THAN = new LESSER_THANElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.inria.diverse.logo.dsl.LogoDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LogoProgram:
	//	sentences+=SENTENCE*;
	public LogoProgramElements getLogoProgramAccess() {
		return pLogoProgram;
	}
	
	public ParserRule getLogoProgramRule() {
		return getLogoProgramAccess().getRule();
	}

	//SENTENCE: // VARIABLES
	//	MAKE | CONTENT | PROCEDURE_CALL | OPERATION | CONTROL_SENTENCES | MOVE | DRAWING_SENTENCE;
	public SENTENCEElements getSENTENCEAccess() {
		return pSENTENCE;
	}
	
	public ParserRule getSENTENCERule() {
		return getSENTENCEAccess().getRule();
	}

	//MOVE:
	//	FORWARD | LEFT | RIGHT | SET_X | SET_Y;
	public MOVEElements getMOVEAccess() {
		return pMOVE;
	}
	
	public ParserRule getMOVERule() {
		return getMOVEAccess().getRule();
	}

	//FORWARD:
	//	"FORWARD" amount=EXPRESSION;
	public FORWARDElements getFORWARDAccess() {
		return pFORWARD;
	}
	
	public ParserRule getFORWARDRule() {
		return getFORWARDAccess().getRule();
	}

	//LEFT:
	//	"LEFT" amount=EXPRESSION;
	public LEFTElements getLEFTAccess() {
		return pLEFT;
	}
	
	public ParserRule getLEFTRule() {
		return getLEFTAccess().getRule();
	}

	//RIGHT:
	//	"RIGHT" amount=EXPRESSION;
	public RIGHTElements getRIGHTAccess() {
		return pRIGHT;
	}
	
	public ParserRule getRIGHTRule() {
		return getRIGHTAccess().getRule();
	}

	//SET_X:
	//	"SETX" amount=EXPRESSION;
	public SET_XElements getSET_XAccess() {
		return pSET_X;
	}
	
	public ParserRule getSET_XRule() {
		return getSET_XAccess().getRule();
	}

	//SET_Y:
	//	"SETY" amount=EXPRESSION;
	public SET_YElements getSET_YAccess() {
		return pSET_Y;
	}
	
	public ParserRule getSET_YRule() {
		return getSET_YAccess().getRule();
	}

	//DRAWING_SENTENCE:
	//	PENDOWN | PENUP | CLEAR | HOME | COLOREABLE | FONT_SPEC | DRAW_STRING;
	public DRAWING_SENTENCEElements getDRAWING_SENTENCEAccess() {
		return pDRAWING_SENTENCE;
	}
	
	public ParserRule getDRAWING_SENTENCERule() {
		return getDRAWING_SENTENCEAccess().getRule();
	}

	//PENDOWN:
	//	{PENDOWN} "PENDOWN";
	public PENDOWNElements getPENDOWNAccess() {
		return pPENDOWN;
	}
	
	public ParserRule getPENDOWNRule() {
		return getPENDOWNAccess().getRule();
	}

	//PENUP:
	//	{PENUP} "PENUP";
	public PENUPElements getPENUPAccess() {
		return pPENUP;
	}
	
	public ParserRule getPENUPRule() {
		return getPENUPAccess().getRule();
	}

	//COLOREABLE:
	//	PENCOLOR | CANVAS_COLOR;
	public COLOREABLEElements getCOLOREABLEAccess() {
		return pCOLOREABLE;
	}
	
	public ParserRule getCOLOREABLERule() {
		return getCOLOREABLEAccess().getRule();
	}

	//PENCOLOR:
	//	"PENCOLOR" (color=COLOR | colorSpec=COLOR_SPEC);
	public PENCOLORElements getPENCOLORAccess() {
		return pPENCOLOR;
	}
	
	public ParserRule getPENCOLORRule() {
		return getPENCOLORAccess().getRule();
	}

	//CANVAS_COLOR:
	//	"CANVASCOLOR" (color=COLOR | colorSpec=COLOR_SPEC);
	public CANVAS_COLORElements getCANVAS_COLORAccess() {
		return pCANVAS_COLOR;
	}
	
	public ParserRule getCANVAS_COLORRule() {
		return getCANVAS_COLORAccess().getRule();
	}

	//COLOR_SPEC:
	//	red=EXPRESSION green=EXPRESSION blue=EXPRESSION alpha=EXPRESSION;
	public COLOR_SPECElements getCOLOR_SPECAccess() {
		return pCOLOR_SPEC;
	}
	
	public ParserRule getCOLOR_SPECRule() {
		return getCOLOR_SPECAccess().getRule();
	}

	//COLOR:
	//	"BLACK" | "BLUE" | "CYAN" | "DARK GRAY" | "GRAY" | "GREEN" | "LIGHTGRAY" | "MAGENTA" | "ORANGE" | "PINK" | "RED" |
	//	"WHITE" | "YELLOW";
	public COLORElements getCOLORAccess() {
		return pCOLOR;
	}
	
	public ParserRule getCOLORRule() {
		return getCOLORAccess().getRule();
	}

	//FONT_SPEC:
	//	FONT_STYLE;
	public FONT_SPECElements getFONT_SPECAccess() {
		return pFONT_SPEC;
	}
	
	public ParserRule getFONT_SPECRule() {
		return getFONT_SPECAccess().getRule();
	}

	//FONT_STYLE:
	//	"FONTSTYLE" style=FontStyleValues;
	public FONT_STYLEElements getFONT_STYLEAccess() {
		return pFONT_STYLE;
	}
	
	public ParserRule getFONT_STYLERule() {
		return getFONT_STYLEAccess().getRule();
	}

	//FontStyleValues:
	//	{BOLD} "BOLD" | {ITALIC} "ITALIC" | {PLAIN} "PLAIN";
	public FontStyleValuesElements getFontStyleValuesAccess() {
		return pFontStyleValues;
	}
	
	public ParserRule getFontStyleValuesRule() {
		return getFontStyleValuesAccess().getRule();
	}

	//CLEAR:
	//	{CLEAR} "CLEAR";
	public CLEARElements getCLEARAccess() {
		return pCLEAR;
	}
	
	public ParserRule getCLEARRule() {
		return getCLEARAccess().getRule();
	}

	//HOME:
	//	{HOME} "HOME";
	public HOMEElements getHOMEAccess() {
		return pHOME;
	}
	
	public ParserRule getHOMERule() {
		return getHOMEAccess().getRule();
	}

	//DRAW_STRING:
	//	"DRAWSTRING" text=STRING;
	public DRAW_STRINGElements getDRAW_STRINGAccess() {
		return pDRAW_STRING;
	}
	
	public ParserRule getDRAW_STRINGRule() {
		return getDRAW_STRINGAccess().getRule();
	}

	//REFERENCIABLE:
	//	MAKE | PARAM;
	public REFERENCIABLEElements getREFERENCIABLEAccess() {
		return pREFERENCIABLE;
	}
	
	public ParserRule getREFERENCIABLERule() {
		return getREFERENCIABLEAccess().getRule();
	}

	//MAKE:
	//	"MAKE" name=ID "=" value=EXPRESSION;
	public MAKEElements getMAKEAccess() {
		return pMAKE;
	}
	
	public ParserRule getMAKERule() {
		return getMAKEAccess().getRule();
	}

	//VARIABLE_REF:
	//	toVar=[REFERENCIABLE];
	public VARIABLE_REFElements getVARIABLE_REFAccess() {
		return pVARIABLE_REF;
	}
	
	public ParserRule getVARIABLE_REFRule() {
		return getVARIABLE_REFAccess().getRule();
	}

	//EXPRESSION:
	//	VARIABLE_REF | VALUE;
	public EXPRESSIONElements getEXPRESSIONAccess() {
		return pEXPRESSION;
	}
	
	public ParserRule getEXPRESSIONRule() {
		return getEXPRESSIONAccess().getRule();
	}

	//VALUE:
	//	val=DOUBLE;
	public VALUEElements getVALUEAccess() {
		return pVALUE;
	}
	
	public ParserRule getVALUERule() {
		return getVALUEAccess().getRule();
	}

	//CONTENT:
	//	"CONTENT" var=[MAKE];
	public CONTENTElements getCONTENTAccess() {
		return pCONTENT;
	}
	
	public ParserRule getCONTENTRule() {
		return getCONTENTAccess().getRule();
	}

	//OPERATION:
	//	SUM | SUBTRACT | MULTIPLY | DIVIDE;
	public OPERATIONElements getOPERATIONAccess() {
		return pOPERATION;
	}
	
	public ParserRule getOPERATIONRule() {
		return getOPERATIONAccess().getRule();
	}

	//SUM:
	//	"SUM" targetVariable=[MAKE] "=" valOne=EXPRESSION "+" valTwo=EXPRESSION;
	public SUMElements getSUMAccess() {
		return pSUM;
	}
	
	public ParserRule getSUMRule() {
		return getSUMAccess().getRule();
	}

	//SUBTRACT:
	//	"SUBTRACT" targetVariable=[MAKE] "=" valOne=EXPRESSION "-" valTwo=EXPRESSION;
	public SUBTRACTElements getSUBTRACTAccess() {
		return pSUBTRACT;
	}
	
	public ParserRule getSUBTRACTRule() {
		return getSUBTRACTAccess().getRule();
	}

	//MULTIPLY:
	//	"MULTIPLY" targetVariable=[MAKE] "=" valOne=EXPRESSION "*" valTwo=EXPRESSION;
	public MULTIPLYElements getMULTIPLYAccess() {
		return pMULTIPLY;
	}
	
	public ParserRule getMULTIPLYRule() {
		return getMULTIPLYAccess().getRule();
	}

	//DIVIDE:
	//	"DIVIDE" targetVariable=[MAKE] "=" valOne=EXPRESSION "/" valTwo=EXPRESSION;
	public DIVIDEElements getDIVIDEAccess() {
		return pDIVIDE;
	}
	
	public ParserRule getDIVIDERule() {
		return getDIVIDEAccess().getRule();
	}

	//CONTROL_SENTENCES:
	//	REPEAT | TO | IF_SENTENCE;
	public CONTROL_SENTENCESElements getCONTROL_SENTENCESAccess() {
		return pCONTROL_SENTENCES;
	}
	
	public ParserRule getCONTROL_SENTENCESRule() {
		return getCONTROL_SENTENCESAccess().getRule();
	}

	//REPEAT:
	//	"REPEAT" times=EXPRESSION commands+=SENTENCE+ "END REPEAT";
	public REPEATElements getREPEATAccess() {
		return pREPEAT;
	}
	
	public ParserRule getREPEATRule() {
		return getREPEATAccess().getRule();
	}

	//// define una funcion/procedimiento
	//TO:
	//	"TO" name=ID parameters+=PARAM* commands+=SENTENCE+ "END TO";
	public TOElements getTOAccess() {
		return pTO;
	}
	
	public ParserRule getTORule() {
		return getTOAccess().getRule();
	}

	//PARAM:
	//	":" name=ID;
	public PARAMElements getPARAMAccess() {
		return pPARAM;
	}
	
	public ParserRule getPARAMRule() {
		return getPARAMAccess().getRule();
	}

	//// llamada
	//PROCEDURE_CALL:
	//	to=[TO] params+=EXPRESSION*;
	public PROCEDURE_CALLElements getPROCEDURE_CALLAccess() {
		return pPROCEDURE_CALL;
	}
	
	public ParserRule getPROCEDURE_CALLRule() {
		return getPROCEDURE_CALLAccess().getRule();
	}

	//IF_SENTENCE:
	//	"IF" condition=BOOLEAN_EXPRESSION commands+=SENTENCE+ "END IF";
	public IF_SENTENCEElements getIF_SENTENCEAccess() {
		return pIF_SENTENCE;
	}
	
	public ParserRule getIF_SENTENCERule() {
		return getIF_SENTENCEAccess().getRule();
	}

	//BOOLEAN_EXPRESSION:
	//	EQUALS | GREATER_THAN | LESSER_THAN;
	public BOOLEAN_EXPRESSIONElements getBOOLEAN_EXPRESSIONAccess() {
		return pBOOLEAN_EXPRESSION;
	}
	
	public ParserRule getBOOLEAN_EXPRESSIONRule() {
		return getBOOLEAN_EXPRESSIONAccess().getRule();
	}

	//EQUALS:
	//	op1=EXPRESSION "=" op2=EXPRESSION;
	public EQUALSElements getEQUALSAccess() {
		return pEQUALS;
	}
	
	public ParserRule getEQUALSRule() {
		return getEQUALSAccess().getRule();
	}

	//GREATER_THAN:
	//	op1=EXPRESSION ">" op2=EXPRESSION;
	public GREATER_THANElements getGREATER_THANAccess() {
		return pGREATER_THAN;
	}
	
	public ParserRule getGREATER_THANRule() {
		return getGREATER_THANAccess().getRule();
	}

	//LESSER_THAN:
	//	op1=EXPRESSION "<" op2=EXPRESSION;
	public LESSER_THANElements getLESSER_THANAccess() {
		return pLESSER_THAN;
	}
	
	public ParserRule getLESSER_THANRule() {
		return getLESSER_THANAccess().getRule();
	}

	////terminal DEGREES returns ecore::EInt: ('0'..'9')+ '°';
	//terminal DOUBLE returns ecore::EDouble:
	//	"0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
