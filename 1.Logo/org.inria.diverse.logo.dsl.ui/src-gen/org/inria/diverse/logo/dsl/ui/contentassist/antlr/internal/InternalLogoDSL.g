/*
 * generated by Xtext
 */
grammar InternalLogoDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.inria.diverse.logo.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.inria.diverse.logo.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.inria.diverse.logo.dsl.services.LogoDSLGrammarAccess;

}

@parser::members {
 
 	private LogoDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LogoDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLogoProgram
entryRuleLogoProgram 
:
{ before(grammarAccess.getLogoProgramRule()); }
	 ruleLogoProgram
{ after(grammarAccess.getLogoProgramRule()); } 
	 EOF 
;

// Rule LogoProgram
ruleLogoProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogoProgramAccess().getSentencesAssignment()); }
(rule__LogoProgram__SentencesAssignment)*
{ after(grammarAccess.getLogoProgramAccess().getSentencesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSENTENCE
entryRuleSENTENCE 
:
{ before(grammarAccess.getSENTENCERule()); }
	 ruleSENTENCE
{ after(grammarAccess.getSENTENCERule()); } 
	 EOF 
;

// Rule SENTENCE
ruleSENTENCE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSENTENCEAccess().getAlternatives()); }
(rule__SENTENCE__Alternatives)
{ after(grammarAccess.getSENTENCEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMOVE
entryRuleMOVE 
:
{ before(grammarAccess.getMOVERule()); }
	 ruleMOVE
{ after(grammarAccess.getMOVERule()); } 
	 EOF 
;

// Rule MOVE
ruleMOVE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMOVEAccess().getAlternatives()); }
(rule__MOVE__Alternatives)
{ after(grammarAccess.getMOVEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFORWARD
entryRuleFORWARD 
:
{ before(grammarAccess.getFORWARDRule()); }
	 ruleFORWARD
{ after(grammarAccess.getFORWARDRule()); } 
	 EOF 
;

// Rule FORWARD
ruleFORWARD
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFORWARDAccess().getGroup()); }
(rule__FORWARD__Group__0)
{ after(grammarAccess.getFORWARDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLEFT
entryRuleLEFT 
:
{ before(grammarAccess.getLEFTRule()); }
	 ruleLEFT
{ after(grammarAccess.getLEFTRule()); } 
	 EOF 
;

// Rule LEFT
ruleLEFT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLEFTAccess().getGroup()); }
(rule__LEFT__Group__0)
{ after(grammarAccess.getLEFTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRIGHT
entryRuleRIGHT 
:
{ before(grammarAccess.getRIGHTRule()); }
	 ruleRIGHT
{ after(grammarAccess.getRIGHTRule()); } 
	 EOF 
;

// Rule RIGHT
ruleRIGHT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRIGHTAccess().getGroup()); }
(rule__RIGHT__Group__0)
{ after(grammarAccess.getRIGHTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSET_X
entryRuleSET_X 
:
{ before(grammarAccess.getSET_XRule()); }
	 ruleSET_X
{ after(grammarAccess.getSET_XRule()); } 
	 EOF 
;

// Rule SET_X
ruleSET_X
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSET_XAccess().getGroup()); }
(rule__SET_X__Group__0)
{ after(grammarAccess.getSET_XAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSET_Y
entryRuleSET_Y 
:
{ before(grammarAccess.getSET_YRule()); }
	 ruleSET_Y
{ after(grammarAccess.getSET_YRule()); } 
	 EOF 
;

// Rule SET_Y
ruleSET_Y
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSET_YAccess().getGroup()); }
(rule__SET_Y__Group__0)
{ after(grammarAccess.getSET_YAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDRAWING_SENTENCE
entryRuleDRAWING_SENTENCE 
:
{ before(grammarAccess.getDRAWING_SENTENCERule()); }
	 ruleDRAWING_SENTENCE
{ after(grammarAccess.getDRAWING_SENTENCERule()); } 
	 EOF 
;

// Rule DRAWING_SENTENCE
ruleDRAWING_SENTENCE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getAlternatives()); }
(rule__DRAWING_SENTENCE__Alternatives)
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePENDOWN
entryRulePENDOWN 
:
{ before(grammarAccess.getPENDOWNRule()); }
	 rulePENDOWN
{ after(grammarAccess.getPENDOWNRule()); } 
	 EOF 
;

// Rule PENDOWN
rulePENDOWN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPENDOWNAccess().getGroup()); }
(rule__PENDOWN__Group__0)
{ after(grammarAccess.getPENDOWNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePENUP
entryRulePENUP 
:
{ before(grammarAccess.getPENUPRule()); }
	 rulePENUP
{ after(grammarAccess.getPENUPRule()); } 
	 EOF 
;

// Rule PENUP
rulePENUP
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPENUPAccess().getGroup()); }
(rule__PENUP__Group__0)
{ after(grammarAccess.getPENUPAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCOLOREABLE
entryRuleCOLOREABLE 
:
{ before(grammarAccess.getCOLOREABLERule()); }
	 ruleCOLOREABLE
{ after(grammarAccess.getCOLOREABLERule()); } 
	 EOF 
;

// Rule COLOREABLE
ruleCOLOREABLE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCOLOREABLEAccess().getAlternatives()); }
(rule__COLOREABLE__Alternatives)
{ after(grammarAccess.getCOLOREABLEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePENCOLOR
entryRulePENCOLOR 
:
{ before(grammarAccess.getPENCOLORRule()); }
	 rulePENCOLOR
{ after(grammarAccess.getPENCOLORRule()); } 
	 EOF 
;

// Rule PENCOLOR
rulePENCOLOR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPENCOLORAccess().getGroup()); }
(rule__PENCOLOR__Group__0)
{ after(grammarAccess.getPENCOLORAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCANVAS_COLOR
entryRuleCANVAS_COLOR 
:
{ before(grammarAccess.getCANVAS_COLORRule()); }
	 ruleCANVAS_COLOR
{ after(grammarAccess.getCANVAS_COLORRule()); } 
	 EOF 
;

// Rule CANVAS_COLOR
ruleCANVAS_COLOR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCANVAS_COLORAccess().getGroup()); }
(rule__CANVAS_COLOR__Group__0)
{ after(grammarAccess.getCANVAS_COLORAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCOLOR_SPEC
entryRuleCOLOR_SPEC 
:
{ before(grammarAccess.getCOLOR_SPECRule()); }
	 ruleCOLOR_SPEC
{ after(grammarAccess.getCOLOR_SPECRule()); } 
	 EOF 
;

// Rule COLOR_SPEC
ruleCOLOR_SPEC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getGroup()); }
(rule__COLOR_SPEC__Group__0)
{ after(grammarAccess.getCOLOR_SPECAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCOLOR
entryRuleCOLOR 
:
{ before(grammarAccess.getCOLORRule()); }
	 ruleCOLOR
{ after(grammarAccess.getCOLORRule()); } 
	 EOF 
;

// Rule COLOR
ruleCOLOR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCOLORAccess().getAlternatives()); }
(rule__COLOR__Alternatives)
{ after(grammarAccess.getCOLORAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFONT_SPEC
entryRuleFONT_SPEC 
:
{ before(grammarAccess.getFONT_SPECRule()); }
	 ruleFONT_SPEC
{ after(grammarAccess.getFONT_SPECRule()); } 
	 EOF 
;

// Rule FONT_SPEC
ruleFONT_SPEC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFONT_SPECAccess().getFONT_STYLEParserRuleCall()); }
	ruleFONT_STYLE
{ after(grammarAccess.getFONT_SPECAccess().getFONT_STYLEParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFONT_STYLE
entryRuleFONT_STYLE 
:
{ before(grammarAccess.getFONT_STYLERule()); }
	 ruleFONT_STYLE
{ after(grammarAccess.getFONT_STYLERule()); } 
	 EOF 
;

// Rule FONT_STYLE
ruleFONT_STYLE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFONT_STYLEAccess().getGroup()); }
(rule__FONT_STYLE__Group__0)
{ after(grammarAccess.getFONT_STYLEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFontStyleValues
entryRuleFontStyleValues 
:
{ before(grammarAccess.getFontStyleValuesRule()); }
	 ruleFontStyleValues
{ after(grammarAccess.getFontStyleValuesRule()); } 
	 EOF 
;

// Rule FontStyleValues
ruleFontStyleValues
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFontStyleValuesAccess().getAlternatives()); }
(rule__FontStyleValues__Alternatives)
{ after(grammarAccess.getFontStyleValuesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCLEAR
entryRuleCLEAR 
:
{ before(grammarAccess.getCLEARRule()); }
	 ruleCLEAR
{ after(grammarAccess.getCLEARRule()); } 
	 EOF 
;

// Rule CLEAR
ruleCLEAR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCLEARAccess().getGroup()); }
(rule__CLEAR__Group__0)
{ after(grammarAccess.getCLEARAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHOME
entryRuleHOME 
:
{ before(grammarAccess.getHOMERule()); }
	 ruleHOME
{ after(grammarAccess.getHOMERule()); } 
	 EOF 
;

// Rule HOME
ruleHOME
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHOMEAccess().getGroup()); }
(rule__HOME__Group__0)
{ after(grammarAccess.getHOMEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDRAW_STRING
entryRuleDRAW_STRING 
:
{ before(grammarAccess.getDRAW_STRINGRule()); }
	 ruleDRAW_STRING
{ after(grammarAccess.getDRAW_STRINGRule()); } 
	 EOF 
;

// Rule DRAW_STRING
ruleDRAW_STRING
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDRAW_STRINGAccess().getGroup()); }
(rule__DRAW_STRING__Group__0)
{ after(grammarAccess.getDRAW_STRINGAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleMAKE
entryRuleMAKE 
:
{ before(grammarAccess.getMAKERule()); }
	 ruleMAKE
{ after(grammarAccess.getMAKERule()); } 
	 EOF 
;

// Rule MAKE
ruleMAKE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMAKEAccess().getGroup()); }
(rule__MAKE__Group__0)
{ after(grammarAccess.getMAKEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVARIABLE_REF
entryRuleVARIABLE_REF 
:
{ before(grammarAccess.getVARIABLE_REFRule()); }
	 ruleVARIABLE_REF
{ after(grammarAccess.getVARIABLE_REFRule()); } 
	 EOF 
;

// Rule VARIABLE_REF
ruleVARIABLE_REF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVARIABLE_REFAccess().getToVarAssignment()); }
(rule__VARIABLE_REF__ToVarAssignment)
{ after(grammarAccess.getVARIABLE_REFAccess().getToVarAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEXPRESSION
entryRuleEXPRESSION 
:
{ before(grammarAccess.getEXPRESSIONRule()); }
	 ruleEXPRESSION
{ after(grammarAccess.getEXPRESSIONRule()); } 
	 EOF 
;

// Rule EXPRESSION
ruleEXPRESSION
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEXPRESSIONAccess().getAlternatives()); }
(rule__EXPRESSION__Alternatives)
{ after(grammarAccess.getEXPRESSIONAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVALUE
entryRuleVALUE 
:
{ before(grammarAccess.getVALUERule()); }
	 ruleVALUE
{ after(grammarAccess.getVALUERule()); } 
	 EOF 
;

// Rule VALUE
ruleVALUE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVALUEAccess().getValAssignment()); }
(rule__VALUE__ValAssignment)
{ after(grammarAccess.getVALUEAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCONTENT
entryRuleCONTENT 
:
{ before(grammarAccess.getCONTENTRule()); }
	 ruleCONTENT
{ after(grammarAccess.getCONTENTRule()); } 
	 EOF 
;

// Rule CONTENT
ruleCONTENT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCONTENTAccess().getGroup()); }
(rule__CONTENT__Group__0)
{ after(grammarAccess.getCONTENTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOPERATION
entryRuleOPERATION 
:
{ before(grammarAccess.getOPERATIONRule()); }
	 ruleOPERATION
{ after(grammarAccess.getOPERATIONRule()); } 
	 EOF 
;

// Rule OPERATION
ruleOPERATION
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOPERATIONAccess().getAlternatives()); }
(rule__OPERATION__Alternatives)
{ after(grammarAccess.getOPERATIONAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSUM
entryRuleSUM 
:
{ before(grammarAccess.getSUMRule()); }
	 ruleSUM
{ after(grammarAccess.getSUMRule()); } 
	 EOF 
;

// Rule SUM
ruleSUM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSUMAccess().getGroup()); }
(rule__SUM__Group__0)
{ after(grammarAccess.getSUMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSUBTRACT
entryRuleSUBTRACT 
:
{ before(grammarAccess.getSUBTRACTRule()); }
	 ruleSUBTRACT
{ after(grammarAccess.getSUBTRACTRule()); } 
	 EOF 
;

// Rule SUBTRACT
ruleSUBTRACT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSUBTRACTAccess().getGroup()); }
(rule__SUBTRACT__Group__0)
{ after(grammarAccess.getSUBTRACTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMULTIPLY
entryRuleMULTIPLY 
:
{ before(grammarAccess.getMULTIPLYRule()); }
	 ruleMULTIPLY
{ after(grammarAccess.getMULTIPLYRule()); } 
	 EOF 
;

// Rule MULTIPLY
ruleMULTIPLY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMULTIPLYAccess().getGroup()); }
(rule__MULTIPLY__Group__0)
{ after(grammarAccess.getMULTIPLYAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDIVIDE
entryRuleDIVIDE 
:
{ before(grammarAccess.getDIVIDERule()); }
	 ruleDIVIDE
{ after(grammarAccess.getDIVIDERule()); } 
	 EOF 
;

// Rule DIVIDE
ruleDIVIDE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDIVIDEAccess().getGroup()); }
(rule__DIVIDE__Group__0)
{ after(grammarAccess.getDIVIDEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCONTROL_SENTENCES
entryRuleCONTROL_SENTENCES 
:
{ before(grammarAccess.getCONTROL_SENTENCESRule()); }
	 ruleCONTROL_SENTENCES
{ after(grammarAccess.getCONTROL_SENTENCESRule()); } 
	 EOF 
;

// Rule CONTROL_SENTENCES
ruleCONTROL_SENTENCES
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCONTROL_SENTENCESAccess().getAlternatives()); }
(rule__CONTROL_SENTENCES__Alternatives)
{ after(grammarAccess.getCONTROL_SENTENCESAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREPEAT
entryRuleREPEAT 
:
{ before(grammarAccess.getREPEATRule()); }
	 ruleREPEAT
{ after(grammarAccess.getREPEATRule()); } 
	 EOF 
;

// Rule REPEAT
ruleREPEAT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getREPEATAccess().getGroup()); }
(rule__REPEAT__Group__0)
{ after(grammarAccess.getREPEATAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTO
entryRuleTO 
:
{ before(grammarAccess.getTORule()); }
	 ruleTO
{ after(grammarAccess.getTORule()); } 
	 EOF 
;

// Rule TO
ruleTO
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTOAccess().getGroup()); }
(rule__TO__Group__0)
{ after(grammarAccess.getTOAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePARAM
entryRulePARAM 
:
{ before(grammarAccess.getPARAMRule()); }
	 rulePARAM
{ after(grammarAccess.getPARAMRule()); } 
	 EOF 
;

// Rule PARAM
rulePARAM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPARAMAccess().getGroup()); }
(rule__PARAM__Group__0)
{ after(grammarAccess.getPARAMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePROCEDURE_CALL
entryRulePROCEDURE_CALL 
:
{ before(grammarAccess.getPROCEDURE_CALLRule()); }
	 rulePROCEDURE_CALL
{ after(grammarAccess.getPROCEDURE_CALLRule()); } 
	 EOF 
;

// Rule PROCEDURE_CALL
rulePROCEDURE_CALL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPROCEDURE_CALLAccess().getGroup()); }
(rule__PROCEDURE_CALL__Group__0)
{ after(grammarAccess.getPROCEDURE_CALLAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIF_SENTENCE
entryRuleIF_SENTENCE 
:
{ before(grammarAccess.getIF_SENTENCERule()); }
	 ruleIF_SENTENCE
{ after(grammarAccess.getIF_SENTENCERule()); } 
	 EOF 
;

// Rule IF_SENTENCE
ruleIF_SENTENCE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIF_SENTENCEAccess().getGroup()); }
(rule__IF_SENTENCE__Group__0)
{ after(grammarAccess.getIF_SENTENCEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBOOLEAN_EXPRESSION
entryRuleBOOLEAN_EXPRESSION 
:
{ before(grammarAccess.getBOOLEAN_EXPRESSIONRule()); }
	 ruleBOOLEAN_EXPRESSION
{ after(grammarAccess.getBOOLEAN_EXPRESSIONRule()); } 
	 EOF 
;

// Rule BOOLEAN_EXPRESSION
ruleBOOLEAN_EXPRESSION
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getAlternatives()); }
(rule__BOOLEAN_EXPRESSION__Alternatives)
{ after(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEQUALS
entryRuleEQUALS 
:
{ before(grammarAccess.getEQUALSRule()); }
	 ruleEQUALS
{ after(grammarAccess.getEQUALSRule()); } 
	 EOF 
;

// Rule EQUALS
ruleEQUALS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEQUALSAccess().getGroup()); }
(rule__EQUALS__Group__0)
{ after(grammarAccess.getEQUALSAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGREATER_THAN
entryRuleGREATER_THAN 
:
{ before(grammarAccess.getGREATER_THANRule()); }
	 ruleGREATER_THAN
{ after(grammarAccess.getGREATER_THANRule()); } 
	 EOF 
;

// Rule GREATER_THAN
ruleGREATER_THAN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGREATER_THANAccess().getGroup()); }
(rule__GREATER_THAN__Group__0)
{ after(grammarAccess.getGREATER_THANAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLESSER_THAN
entryRuleLESSER_THAN 
:
{ before(grammarAccess.getLESSER_THANRule()); }
	 ruleLESSER_THAN
{ after(grammarAccess.getLESSER_THANRule()); } 
	 EOF 
;

// Rule LESSER_THAN
ruleLESSER_THAN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLESSER_THANAccess().getGroup()); }
(rule__LESSER_THAN__Group__0)
{ after(grammarAccess.getLESSER_THANAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SENTENCE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSENTENCEAccess().getMAKEParserRuleCall_0()); }
	ruleMAKE
{ after(grammarAccess.getSENTENCEAccess().getMAKEParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSENTENCEAccess().getCONTENTParserRuleCall_1()); }
	ruleCONTENT
{ after(grammarAccess.getSENTENCEAccess().getCONTENTParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSENTENCEAccess().getPROCEDURE_CALLParserRuleCall_2()); }
	rulePROCEDURE_CALL
{ after(grammarAccess.getSENTENCEAccess().getPROCEDURE_CALLParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSENTENCEAccess().getOPERATIONParserRuleCall_3()); }
	ruleOPERATION
{ after(grammarAccess.getSENTENCEAccess().getOPERATIONParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSENTENCEAccess().getCONTROL_SENTENCESParserRuleCall_4()); }
	ruleCONTROL_SENTENCES
{ after(grammarAccess.getSENTENCEAccess().getCONTROL_SENTENCESParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSENTENCEAccess().getMOVEParserRuleCall_5()); }
	ruleMOVE
{ after(grammarAccess.getSENTENCEAccess().getMOVEParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSENTENCEAccess().getDRAWING_SENTENCEParserRuleCall_6()); }
	ruleDRAWING_SENTENCE
{ after(grammarAccess.getSENTENCEAccess().getDRAWING_SENTENCEParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMOVEAccess().getFORWARDParserRuleCall_0()); }
	ruleFORWARD
{ after(grammarAccess.getMOVEAccess().getFORWARDParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMOVEAccess().getLEFTParserRuleCall_1()); }
	ruleLEFT
{ after(grammarAccess.getMOVEAccess().getLEFTParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMOVEAccess().getRIGHTParserRuleCall_2()); }
	ruleRIGHT
{ after(grammarAccess.getMOVEAccess().getRIGHTParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMOVEAccess().getSET_XParserRuleCall_3()); }
	ruleSET_X
{ after(grammarAccess.getMOVEAccess().getSET_XParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getMOVEAccess().getSET_YParserRuleCall_4()); }
	ruleSET_Y
{ after(grammarAccess.getMOVEAccess().getSET_YParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DRAWING_SENTENCE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getPENDOWNParserRuleCall_0()); }
	rulePENDOWN
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getPENDOWNParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getPENUPParserRuleCall_1()); }
	rulePENUP
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getPENUPParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getCLEARParserRuleCall_2()); }
	ruleCLEAR
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getCLEARParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getHOMEParserRuleCall_3()); }
	ruleHOME
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getHOMEParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getCOLOREABLEParserRuleCall_4()); }
	ruleCOLOREABLE
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getCOLOREABLEParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getFONT_SPECParserRuleCall_5()); }
	ruleFONT_SPEC
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getFONT_SPECParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getDRAWING_SENTENCEAccess().getDRAW_STRINGParserRuleCall_6()); }
	ruleDRAW_STRING
{ after(grammarAccess.getDRAWING_SENTENCEAccess().getDRAW_STRINGParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__COLOREABLE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOREABLEAccess().getPENCOLORParserRuleCall_0()); }
	rulePENCOLOR
{ after(grammarAccess.getCOLOREABLEAccess().getPENCOLORParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCOLOREABLEAccess().getCANVAS_COLORParserRuleCall_1()); }
	ruleCANVAS_COLOR
{ after(grammarAccess.getCOLOREABLEAccess().getCANVAS_COLORParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PENCOLOR__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENCOLORAccess().getColorAssignment_1_0()); }
(rule__PENCOLOR__ColorAssignment_1_0)
{ after(grammarAccess.getPENCOLORAccess().getColorAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getPENCOLORAccess().getColorSpecAssignment_1_1()); }
(rule__PENCOLOR__ColorSpecAssignment_1_1)
{ after(grammarAccess.getPENCOLORAccess().getColorSpecAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CANVAS_COLOR__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCANVAS_COLORAccess().getColorAssignment_1_0()); }
(rule__CANVAS_COLOR__ColorAssignment_1_0)
{ after(grammarAccess.getCANVAS_COLORAccess().getColorAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getCANVAS_COLORAccess().getColorSpecAssignment_1_1()); }
(rule__CANVAS_COLOR__ColorSpecAssignment_1_1)
{ after(grammarAccess.getCANVAS_COLORAccess().getColorSpecAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLORAccess().getBLACKKeyword_0()); }

	'BLACK' 

{ after(grammarAccess.getCOLORAccess().getBLACKKeyword_0()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getBLUEKeyword_1()); }

	'BLUE' 

{ after(grammarAccess.getCOLORAccess().getBLUEKeyword_1()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getCYANKeyword_2()); }

	'CYAN' 

{ after(grammarAccess.getCOLORAccess().getCYANKeyword_2()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getDARKGRAYKeyword_3()); }

	'DARK GRAY' 

{ after(grammarAccess.getCOLORAccess().getDARKGRAYKeyword_3()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getGRAYKeyword_4()); }

	'GRAY' 

{ after(grammarAccess.getCOLORAccess().getGRAYKeyword_4()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getGREENKeyword_5()); }

	'GREEN' 

{ after(grammarAccess.getCOLORAccess().getGREENKeyword_5()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getLIGHTGRAYKeyword_6()); }

	'LIGHTGRAY' 

{ after(grammarAccess.getCOLORAccess().getLIGHTGRAYKeyword_6()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getMAGENTAKeyword_7()); }

	'MAGENTA' 

{ after(grammarAccess.getCOLORAccess().getMAGENTAKeyword_7()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getORANGEKeyword_8()); }

	'ORANGE' 

{ after(grammarAccess.getCOLORAccess().getORANGEKeyword_8()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getPINKKeyword_9()); }

	'PINK' 

{ after(grammarAccess.getCOLORAccess().getPINKKeyword_9()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getREDKeyword_10()); }

	'RED' 

{ after(grammarAccess.getCOLORAccess().getREDKeyword_10()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getWHITEKeyword_11()); }

	'WHITE' 

{ after(grammarAccess.getCOLORAccess().getWHITEKeyword_11()); }
)

    |(
{ before(grammarAccess.getCOLORAccess().getYELLOWKeyword_12()); }

	'YELLOW' 

{ after(grammarAccess.getCOLORAccess().getYELLOWKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FontStyleValues__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontStyleValuesAccess().getGroup_0()); }
(rule__FontStyleValues__Group_0__0)
{ after(grammarAccess.getFontStyleValuesAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFontStyleValuesAccess().getGroup_1()); }
(rule__FontStyleValues__Group_1__0)
{ after(grammarAccess.getFontStyleValuesAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getFontStyleValuesAccess().getGroup_2()); }
(rule__FontStyleValues__Group_2__0)
{ after(grammarAccess.getFontStyleValuesAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EXPRESSION__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getVARIABLE_REFParserRuleCall_0()); }
	ruleVARIABLE_REF
{ after(grammarAccess.getEXPRESSIONAccess().getVARIABLE_REFParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEXPRESSIONAccess().getVALUEParserRuleCall_1()); }
	ruleVALUE
{ after(grammarAccess.getEXPRESSIONAccess().getVALUEParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OPERATION__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOPERATIONAccess().getSUMParserRuleCall_0()); }
	ruleSUM
{ after(grammarAccess.getOPERATIONAccess().getSUMParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOPERATIONAccess().getSUBTRACTParserRuleCall_1()); }
	ruleSUBTRACT
{ after(grammarAccess.getOPERATIONAccess().getSUBTRACTParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOPERATIONAccess().getMULTIPLYParserRuleCall_2()); }
	ruleMULTIPLY
{ after(grammarAccess.getOPERATIONAccess().getMULTIPLYParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getOPERATIONAccess().getDIVIDEParserRuleCall_3()); }
	ruleDIVIDE
{ after(grammarAccess.getOPERATIONAccess().getDIVIDEParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CONTROL_SENTENCES__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCONTROL_SENTENCESAccess().getREPEATParserRuleCall_0()); }
	ruleREPEAT
{ after(grammarAccess.getCONTROL_SENTENCESAccess().getREPEATParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCONTROL_SENTENCESAccess().getTOParserRuleCall_1()); }
	ruleTO
{ after(grammarAccess.getCONTROL_SENTENCESAccess().getTOParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCONTROL_SENTENCESAccess().getIF_SENTENCEParserRuleCall_2()); }
	ruleIF_SENTENCE
{ after(grammarAccess.getCONTROL_SENTENCESAccess().getIF_SENTENCEParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN_EXPRESSION__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getEQUALSParserRuleCall_0()); }
	ruleEQUALS
{ after(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getEQUALSParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getGREATER_THANParserRuleCall_1()); }
	ruleGREATER_THAN
{ after(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getGREATER_THANParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getLESSER_THANParserRuleCall_2()); }
	ruleLESSER_THAN
{ after(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getLESSER_THANParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__FORWARD__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FORWARD__Group__0__Impl
	rule__FORWARD__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFORWARDAccess().getFORWARDKeyword_0()); }

	'FORWARD' 

{ after(grammarAccess.getFORWARDAccess().getFORWARDKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FORWARD__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FORWARD__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFORWARDAccess().getAmountAssignment_1()); }
(rule__FORWARD__AmountAssignment_1)
{ after(grammarAccess.getFORWARDAccess().getAmountAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LEFT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LEFT__Group__0__Impl
	rule__LEFT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLEFTAccess().getLEFTKeyword_0()); }

	'LEFT' 

{ after(grammarAccess.getLEFTAccess().getLEFTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LEFT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LEFT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLEFTAccess().getAmountAssignment_1()); }
(rule__LEFT__AmountAssignment_1)
{ after(grammarAccess.getLEFTAccess().getAmountAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RIGHT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RIGHT__Group__0__Impl
	rule__RIGHT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0()); }

	'RIGHT' 

{ after(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RIGHT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RIGHT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRIGHTAccess().getAmountAssignment_1()); }
(rule__RIGHT__AmountAssignment_1)
{ after(grammarAccess.getRIGHTAccess().getAmountAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SET_X__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SET_X__Group__0__Impl
	rule__SET_X__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SET_X__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSET_XAccess().getSETXKeyword_0()); }

	'SETX' 

{ after(grammarAccess.getSET_XAccess().getSETXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SET_X__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SET_X__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SET_X__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSET_XAccess().getAmountAssignment_1()); }
(rule__SET_X__AmountAssignment_1)
{ after(grammarAccess.getSET_XAccess().getAmountAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SET_Y__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SET_Y__Group__0__Impl
	rule__SET_Y__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SET_Y__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSET_YAccess().getSETYKeyword_0()); }

	'SETY' 

{ after(grammarAccess.getSET_YAccess().getSETYKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SET_Y__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SET_Y__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SET_Y__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSET_YAccess().getAmountAssignment_1()); }
(rule__SET_Y__AmountAssignment_1)
{ after(grammarAccess.getSET_YAccess().getAmountAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PENDOWN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PENDOWN__Group__0__Impl
	rule__PENDOWN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PENDOWN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENDOWNAccess().getPENDOWNAction_0()); }
(

)
{ after(grammarAccess.getPENDOWNAccess().getPENDOWNAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PENDOWN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PENDOWN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PENDOWN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENDOWNAccess().getPENDOWNKeyword_1()); }

	'PENDOWN' 

{ after(grammarAccess.getPENDOWNAccess().getPENDOWNKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PENUP__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PENUP__Group__0__Impl
	rule__PENUP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PENUP__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENUPAccess().getPENUPAction_0()); }
(

)
{ after(grammarAccess.getPENUPAccess().getPENUPAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PENUP__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PENUP__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PENUP__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENUPAccess().getPENUPKeyword_1()); }

	'PENUP' 

{ after(grammarAccess.getPENUPAccess().getPENUPKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PENCOLOR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PENCOLOR__Group__0__Impl
	rule__PENCOLOR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PENCOLOR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENCOLORAccess().getPENCOLORKeyword_0()); }

	'PENCOLOR' 

{ after(grammarAccess.getPENCOLORAccess().getPENCOLORKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PENCOLOR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PENCOLOR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PENCOLOR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENCOLORAccess().getAlternatives_1()); }
(rule__PENCOLOR__Alternatives_1)
{ after(grammarAccess.getPENCOLORAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CANVAS_COLOR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CANVAS_COLOR__Group__0__Impl
	rule__CANVAS_COLOR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CANVAS_COLOR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCANVAS_COLORAccess().getCANVASCOLORKeyword_0()); }

	'CANVASCOLOR' 

{ after(grammarAccess.getCANVAS_COLORAccess().getCANVASCOLORKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CANVAS_COLOR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CANVAS_COLOR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CANVAS_COLOR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCANVAS_COLORAccess().getAlternatives_1()); }
(rule__CANVAS_COLOR__Alternatives_1)
{ after(grammarAccess.getCANVAS_COLORAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__COLOR_SPEC__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__COLOR_SPEC__Group__0__Impl
	rule__COLOR_SPEC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getRedAssignment_0()); }
(rule__COLOR_SPEC__RedAssignment_0)
{ after(grammarAccess.getCOLOR_SPECAccess().getRedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__COLOR_SPEC__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__COLOR_SPEC__Group__1__Impl
	rule__COLOR_SPEC__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getGreenAssignment_1()); }
(rule__COLOR_SPEC__GreenAssignment_1)
{ after(grammarAccess.getCOLOR_SPECAccess().getGreenAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__COLOR_SPEC__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__COLOR_SPEC__Group__2__Impl
	rule__COLOR_SPEC__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getBlueAssignment_2()); }
(rule__COLOR_SPEC__BlueAssignment_2)
{ after(grammarAccess.getCOLOR_SPECAccess().getBlueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__COLOR_SPEC__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__COLOR_SPEC__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getAlphaAssignment_3()); }
(rule__COLOR_SPEC__AlphaAssignment_3)
{ after(grammarAccess.getCOLOR_SPECAccess().getAlphaAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FONT_STYLE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FONT_STYLE__Group__0__Impl
	rule__FONT_STYLE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FONT_STYLE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFONT_STYLEAccess().getFONTSTYLEKeyword_0()); }

	'FONTSTYLE' 

{ after(grammarAccess.getFONT_STYLEAccess().getFONTSTYLEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FONT_STYLE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FONT_STYLE__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FONT_STYLE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFONT_STYLEAccess().getStyleAssignment_1()); }
(rule__FONT_STYLE__StyleAssignment_1)
{ after(grammarAccess.getFONT_STYLEAccess().getStyleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FontStyleValues__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontStyleValues__Group_0__0__Impl
	rule__FontStyleValues__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FontStyleValues__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontStyleValuesAccess().getBOLDAction_0_0()); }
(

)
{ after(grammarAccess.getFontStyleValuesAccess().getBOLDAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FontStyleValues__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontStyleValues__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FontStyleValues__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontStyleValuesAccess().getBOLDKeyword_0_1()); }

	'BOLD' 

{ after(grammarAccess.getFontStyleValuesAccess().getBOLDKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FontStyleValues__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontStyleValues__Group_1__0__Impl
	rule__FontStyleValues__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FontStyleValues__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontStyleValuesAccess().getITALICAction_1_0()); }
(

)
{ after(grammarAccess.getFontStyleValuesAccess().getITALICAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FontStyleValues__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontStyleValues__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FontStyleValues__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontStyleValuesAccess().getITALICKeyword_1_1()); }

	'ITALIC' 

{ after(grammarAccess.getFontStyleValuesAccess().getITALICKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FontStyleValues__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontStyleValues__Group_2__0__Impl
	rule__FontStyleValues__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FontStyleValues__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontStyleValuesAccess().getPLAINAction_2_0()); }
(

)
{ after(grammarAccess.getFontStyleValuesAccess().getPLAINAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FontStyleValues__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontStyleValues__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FontStyleValues__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontStyleValuesAccess().getPLAINKeyword_2_1()); }

	'PLAIN' 

{ after(grammarAccess.getFontStyleValuesAccess().getPLAINKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CLEAR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CLEAR__Group__0__Impl
	rule__CLEAR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CLEAR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCLEARAccess().getCLEARAction_0()); }
(

)
{ after(grammarAccess.getCLEARAccess().getCLEARAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CLEAR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CLEAR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CLEAR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCLEARAccess().getCLEARKeyword_1()); }

	'CLEAR' 

{ after(grammarAccess.getCLEARAccess().getCLEARKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HOME__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HOME__Group__0__Impl
	rule__HOME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HOME__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHOMEAccess().getHOMEAction_0()); }
(

)
{ after(grammarAccess.getHOMEAccess().getHOMEAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HOME__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HOME__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HOME__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHOMEAccess().getHOMEKeyword_1()); }

	'HOME' 

{ after(grammarAccess.getHOMEAccess().getHOMEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DRAW_STRING__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DRAW_STRING__Group__0__Impl
	rule__DRAW_STRING__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DRAW_STRING__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDRAW_STRINGAccess().getDRAWSTRINGKeyword_0()); }

	'DRAWSTRING' 

{ after(grammarAccess.getDRAW_STRINGAccess().getDRAWSTRINGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DRAW_STRING__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DRAW_STRING__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DRAW_STRING__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDRAW_STRINGAccess().getTextAssignment_1()); }
(rule__DRAW_STRING__TextAssignment_1)
{ after(grammarAccess.getDRAW_STRINGAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MAKE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAKE__Group__0__Impl
	rule__MAKE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MAKE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAKEAccess().getMAKEKeyword_0()); }

	'MAKE' 

{ after(grammarAccess.getMAKEAccess().getMAKEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MAKE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAKE__Group__1__Impl
	rule__MAKE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MAKE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAKEAccess().getNameAssignment_1()); }
(rule__MAKE__NameAssignment_1)
{ after(grammarAccess.getMAKEAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MAKE__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAKE__Group__2__Impl
	rule__MAKE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MAKE__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAKEAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getMAKEAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MAKE__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAKE__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MAKE__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAKEAccess().getValueAssignment_3()); }
(rule__MAKE__ValueAssignment_3)
{ after(grammarAccess.getMAKEAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CONTENT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CONTENT__Group__0__Impl
	rule__CONTENT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CONTENT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCONTENTAccess().getCONTENTKeyword_0()); }

	'CONTENT' 

{ after(grammarAccess.getCONTENTAccess().getCONTENTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CONTENT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CONTENT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CONTENT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCONTENTAccess().getVarAssignment_1()); }
(rule__CONTENT__VarAssignment_1)
{ after(grammarAccess.getCONTENTAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SUM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUM__Group__0__Impl
	rule__SUM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getSUMKeyword_0()); }

	'SUM' 

{ after(grammarAccess.getSUMAccess().getSUMKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUM__Group__1__Impl
	rule__SUM__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getTargetVariableAssignment_1()); }
(rule__SUM__TargetVariableAssignment_1)
{ after(grammarAccess.getSUMAccess().getTargetVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUM__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUM__Group__2__Impl
	rule__SUM__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getSUMAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUM__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUM__Group__3__Impl
	rule__SUM__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getValOneAssignment_3()); }
(rule__SUM__ValOneAssignment_3)
{ after(grammarAccess.getSUMAccess().getValOneAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUM__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUM__Group__4__Impl
	rule__SUM__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getPlusSignKeyword_4()); }

	'+' 

{ after(grammarAccess.getSUMAccess().getPlusSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUM__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUM__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getValTwoAssignment_5()); }
(rule__SUM__ValTwoAssignment_5)
{ after(grammarAccess.getSUMAccess().getValTwoAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SUBTRACT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUBTRACT__Group__0__Impl
	rule__SUBTRACT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getSUBTRACTKeyword_0()); }

	'SUBTRACT' 

{ after(grammarAccess.getSUBTRACTAccess().getSUBTRACTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUBTRACT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUBTRACT__Group__1__Impl
	rule__SUBTRACT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getTargetVariableAssignment_1()); }
(rule__SUBTRACT__TargetVariableAssignment_1)
{ after(grammarAccess.getSUBTRACTAccess().getTargetVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUBTRACT__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUBTRACT__Group__2__Impl
	rule__SUBTRACT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getSUBTRACTAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUBTRACT__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUBTRACT__Group__3__Impl
	rule__SUBTRACT__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getValOneAssignment_3()); }
(rule__SUBTRACT__ValOneAssignment_3)
{ after(grammarAccess.getSUBTRACTAccess().getValOneAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUBTRACT__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUBTRACT__Group__4__Impl
	rule__SUBTRACT__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getHyphenMinusKeyword_4()); }

	'-' 

{ after(grammarAccess.getSUBTRACTAccess().getHyphenMinusKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SUBTRACT__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SUBTRACT__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getValTwoAssignment_5()); }
(rule__SUBTRACT__ValTwoAssignment_5)
{ after(grammarAccess.getSUBTRACTAccess().getValTwoAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__MULTIPLY__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MULTIPLY__Group__0__Impl
	rule__MULTIPLY__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getMULTIPLYKeyword_0()); }

	'MULTIPLY' 

{ after(grammarAccess.getMULTIPLYAccess().getMULTIPLYKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MULTIPLY__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MULTIPLY__Group__1__Impl
	rule__MULTIPLY__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getTargetVariableAssignment_1()); }
(rule__MULTIPLY__TargetVariableAssignment_1)
{ after(grammarAccess.getMULTIPLYAccess().getTargetVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MULTIPLY__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MULTIPLY__Group__2__Impl
	rule__MULTIPLY__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getMULTIPLYAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MULTIPLY__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MULTIPLY__Group__3__Impl
	rule__MULTIPLY__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getValOneAssignment_3()); }
(rule__MULTIPLY__ValOneAssignment_3)
{ after(grammarAccess.getMULTIPLYAccess().getValOneAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MULTIPLY__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MULTIPLY__Group__4__Impl
	rule__MULTIPLY__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getAsteriskKeyword_4()); }

	'*' 

{ after(grammarAccess.getMULTIPLYAccess().getAsteriskKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MULTIPLY__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MULTIPLY__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getValTwoAssignment_5()); }
(rule__MULTIPLY__ValTwoAssignment_5)
{ after(grammarAccess.getMULTIPLYAccess().getValTwoAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DIVIDE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIVIDE__Group__0__Impl
	rule__DIVIDE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getDIVIDEKeyword_0()); }

	'DIVIDE' 

{ after(grammarAccess.getDIVIDEAccess().getDIVIDEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DIVIDE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIVIDE__Group__1__Impl
	rule__DIVIDE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getTargetVariableAssignment_1()); }
(rule__DIVIDE__TargetVariableAssignment_1)
{ after(grammarAccess.getDIVIDEAccess().getTargetVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DIVIDE__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIVIDE__Group__2__Impl
	rule__DIVIDE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getDIVIDEAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DIVIDE__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIVIDE__Group__3__Impl
	rule__DIVIDE__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getValOneAssignment_3()); }
(rule__DIVIDE__ValOneAssignment_3)
{ after(grammarAccess.getDIVIDEAccess().getValOneAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DIVIDE__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIVIDE__Group__4__Impl
	rule__DIVIDE__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getSolidusKeyword_4()); }

	'/' 

{ after(grammarAccess.getDIVIDEAccess().getSolidusKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DIVIDE__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIVIDE__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getValTwoAssignment_5()); }
(rule__DIVIDE__ValTwoAssignment_5)
{ after(grammarAccess.getDIVIDEAccess().getValTwoAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__REPEAT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REPEAT__Group__0__Impl
	rule__REPEAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REPEAT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREPEATAccess().getREPEATKeyword_0()); }

	'REPEAT' 

{ after(grammarAccess.getREPEATAccess().getREPEATKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REPEAT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REPEAT__Group__1__Impl
	rule__REPEAT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REPEAT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREPEATAccess().getTimesAssignment_1()); }
(rule__REPEAT__TimesAssignment_1)
{ after(grammarAccess.getREPEATAccess().getTimesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REPEAT__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REPEAT__Group__2__Impl
	rule__REPEAT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__REPEAT__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getREPEATAccess().getCommandsAssignment_2()); }
(rule__REPEAT__CommandsAssignment_2)
{ after(grammarAccess.getREPEATAccess().getCommandsAssignment_2()); }
)
(
{ before(grammarAccess.getREPEATAccess().getCommandsAssignment_2()); }
(rule__REPEAT__CommandsAssignment_2)*
{ after(grammarAccess.getREPEATAccess().getCommandsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REPEAT__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REPEAT__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REPEAT__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREPEATAccess().getENDREPEATKeyword_3()); }

	'END REPEAT' 

{ after(grammarAccess.getREPEATAccess().getENDREPEATKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TO__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TO__Group__0__Impl
	rule__TO__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TO__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTOAccess().getTOKeyword_0()); }

	'TO' 

{ after(grammarAccess.getTOAccess().getTOKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TO__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TO__Group__1__Impl
	rule__TO__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TO__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTOAccess().getNameAssignment_1()); }
(rule__TO__NameAssignment_1)
{ after(grammarAccess.getTOAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TO__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TO__Group__2__Impl
	rule__TO__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TO__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTOAccess().getParametersAssignment_2()); }
(rule__TO__ParametersAssignment_2)*
{ after(grammarAccess.getTOAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TO__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TO__Group__3__Impl
	rule__TO__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TO__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTOAccess().getCommandsAssignment_3()); }
(rule__TO__CommandsAssignment_3)
{ after(grammarAccess.getTOAccess().getCommandsAssignment_3()); }
)
(
{ before(grammarAccess.getTOAccess().getCommandsAssignment_3()); }
(rule__TO__CommandsAssignment_3)*
{ after(grammarAccess.getTOAccess().getCommandsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TO__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TO__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TO__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTOAccess().getENDTOKeyword_4()); }

	'END TO' 

{ after(grammarAccess.getTOAccess().getENDTOKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PARAM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PARAM__Group__0__Impl
	rule__PARAM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PARAM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPARAMAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getPARAMAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PARAM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PARAM__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PARAM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPARAMAccess().getNameAssignment_1()); }
(rule__PARAM__NameAssignment_1)
{ after(grammarAccess.getPARAMAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PROCEDURE_CALL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROCEDURE_CALL__Group__0__Impl
	rule__PROCEDURE_CALL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PROCEDURE_CALL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROCEDURE_CALLAccess().getToAssignment_0()); }
(rule__PROCEDURE_CALL__ToAssignment_0)
{ after(grammarAccess.getPROCEDURE_CALLAccess().getToAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PROCEDURE_CALL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROCEDURE_CALL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PROCEDURE_CALL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROCEDURE_CALLAccess().getParamsAssignment_1()); }
(rule__PROCEDURE_CALL__ParamsAssignment_1)*
{ after(grammarAccess.getPROCEDURE_CALLAccess().getParamsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IF_SENTENCE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IF_SENTENCE__Group__0__Impl
	rule__IF_SENTENCE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IF_SENTENCE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIF_SENTENCEAccess().getIFKeyword_0()); }

	'IF' 

{ after(grammarAccess.getIF_SENTENCEAccess().getIFKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IF_SENTENCE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IF_SENTENCE__Group__1__Impl
	rule__IF_SENTENCE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IF_SENTENCE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIF_SENTENCEAccess().getConditionAssignment_1()); }
(rule__IF_SENTENCE__ConditionAssignment_1)
{ after(grammarAccess.getIF_SENTENCEAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IF_SENTENCE__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IF_SENTENCE__Group__2__Impl
	rule__IF_SENTENCE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IF_SENTENCE__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIF_SENTENCEAccess().getCommandsAssignment_2()); }
(rule__IF_SENTENCE__CommandsAssignment_2)
{ after(grammarAccess.getIF_SENTENCEAccess().getCommandsAssignment_2()); }
)
(
{ before(grammarAccess.getIF_SENTENCEAccess().getCommandsAssignment_2()); }
(rule__IF_SENTENCE__CommandsAssignment_2)*
{ after(grammarAccess.getIF_SENTENCEAccess().getCommandsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IF_SENTENCE__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IF_SENTENCE__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IF_SENTENCE__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIF_SENTENCEAccess().getENDIFKeyword_3()); }

	'END IF' 

{ after(grammarAccess.getIF_SENTENCEAccess().getENDIFKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EQUALS__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EQUALS__Group__0__Impl
	rule__EQUALS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EQUALS__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEQUALSAccess().getOp1Assignment_0()); }
(rule__EQUALS__Op1Assignment_0)
{ after(grammarAccess.getEQUALSAccess().getOp1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EQUALS__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EQUALS__Group__1__Impl
	rule__EQUALS__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EQUALS__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEQUALSAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getEQUALSAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EQUALS__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EQUALS__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EQUALS__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEQUALSAccess().getOp2Assignment_2()); }
(rule__EQUALS__Op2Assignment_2)
{ after(grammarAccess.getEQUALSAccess().getOp2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GREATER_THAN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GREATER_THAN__Group__0__Impl
	rule__GREATER_THAN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GREATER_THAN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGREATER_THANAccess().getOp1Assignment_0()); }
(rule__GREATER_THAN__Op1Assignment_0)
{ after(grammarAccess.getGREATER_THANAccess().getOp1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GREATER_THAN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GREATER_THAN__Group__1__Impl
	rule__GREATER_THAN__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GREATER_THAN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGREATER_THANAccess().getGreaterThanSignKeyword_1()); }

	'>' 

{ after(grammarAccess.getGREATER_THANAccess().getGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GREATER_THAN__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GREATER_THAN__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GREATER_THAN__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGREATER_THANAccess().getOp2Assignment_2()); }
(rule__GREATER_THAN__Op2Assignment_2)
{ after(grammarAccess.getGREATER_THANAccess().getOp2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LESSER_THAN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LESSER_THAN__Group__0__Impl
	rule__LESSER_THAN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LESSER_THAN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLESSER_THANAccess().getOp1Assignment_0()); }
(rule__LESSER_THAN__Op1Assignment_0)
{ after(grammarAccess.getLESSER_THANAccess().getOp1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LESSER_THAN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LESSER_THAN__Group__1__Impl
	rule__LESSER_THAN__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LESSER_THAN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLESSER_THANAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getLESSER_THANAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LESSER_THAN__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LESSER_THAN__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LESSER_THAN__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLESSER_THANAccess().getOp2Assignment_2()); }
(rule__LESSER_THAN__Op2Assignment_2)
{ after(grammarAccess.getLESSER_THANAccess().getOp2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__LogoProgram__SentencesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogoProgramAccess().getSentencesSENTENCEParserRuleCall_0()); }
	ruleSENTENCE{ after(grammarAccess.getLogoProgramAccess().getSentencesSENTENCEParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FORWARD__AmountAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFORWARDAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getFORWARDAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__AmountAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLEFTAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getLEFTAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__AmountAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRIGHTAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getRIGHTAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SET_X__AmountAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSET_XAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getSET_XAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SET_Y__AmountAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSET_YAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getSET_YAccess().getAmountEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PENCOLOR__ColorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENCOLORAccess().getColorCOLORParserRuleCall_1_0_0()); }
	ruleCOLOR{ after(grammarAccess.getPENCOLORAccess().getColorCOLORParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PENCOLOR__ColorSpecAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPENCOLORAccess().getColorSpecCOLOR_SPECParserRuleCall_1_1_0()); }
	ruleCOLOR_SPEC{ after(grammarAccess.getPENCOLORAccess().getColorSpecCOLOR_SPECParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CANVAS_COLOR__ColorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCANVAS_COLORAccess().getColorCOLORParserRuleCall_1_0_0()); }
	ruleCOLOR{ after(grammarAccess.getCANVAS_COLORAccess().getColorCOLORParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CANVAS_COLOR__ColorSpecAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCANVAS_COLORAccess().getColorSpecCOLOR_SPECParserRuleCall_1_1_0()); }
	ruleCOLOR_SPEC{ after(grammarAccess.getCANVAS_COLORAccess().getColorSpecCOLOR_SPECParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__RedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getRedEXPRESSIONParserRuleCall_0_0()); }
	ruleEXPRESSION{ after(grammarAccess.getCOLOR_SPECAccess().getRedEXPRESSIONParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__GreenAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getGreenEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getCOLOR_SPECAccess().getGreenEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__BlueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getBlueEXPRESSIONParserRuleCall_2_0()); }
	ruleEXPRESSION{ after(grammarAccess.getCOLOR_SPECAccess().getBlueEXPRESSIONParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__COLOR_SPEC__AlphaAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOLOR_SPECAccess().getAlphaEXPRESSIONParserRuleCall_3_0()); }
	ruleEXPRESSION{ after(grammarAccess.getCOLOR_SPECAccess().getAlphaEXPRESSIONParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FONT_STYLE__StyleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFONT_STYLEAccess().getStyleFontStyleValuesParserRuleCall_1_0()); }
	ruleFontStyleValues{ after(grammarAccess.getFONT_STYLEAccess().getStyleFontStyleValuesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DRAW_STRING__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDRAW_STRINGAccess().getTextSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getDRAW_STRINGAccess().getTextSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MAKE__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAKEAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMAKEAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MAKE__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAKEAccess().getValueEXPRESSIONParserRuleCall_3_0()); }
	ruleEXPRESSION{ after(grammarAccess.getMAKEAccess().getValueEXPRESSIONParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLE_REF__ToVarAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARIABLE_REFAccess().getToVarREFERENCIABLECrossReference_0()); }
(
{ before(grammarAccess.getVARIABLE_REFAccess().getToVarREFERENCIABLEIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVARIABLE_REFAccess().getToVarREFERENCIABLEIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVARIABLE_REFAccess().getToVarREFERENCIABLECrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VALUE__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVALUEAccess().getValDOUBLETerminalRuleCall_0()); }
	RULE_DOUBLE{ after(grammarAccess.getVALUEAccess().getValDOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CONTENT__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCONTENTAccess().getVarMAKECrossReference_1_0()); }
(
{ before(grammarAccess.getCONTENTAccess().getVarMAKEIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getCONTENTAccess().getVarMAKEIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getCONTENTAccess().getVarMAKECrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__TargetVariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getTargetVariableMAKECrossReference_1_0()); }
(
{ before(grammarAccess.getSUMAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSUMAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSUMAccess().getTargetVariableMAKECrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__ValOneAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
	ruleEXPRESSION{ after(grammarAccess.getSUMAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__ValTwoAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
	ruleEXPRESSION{ after(grammarAccess.getSUMAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__TargetVariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getTargetVariableMAKECrossReference_1_0()); }
(
{ before(grammarAccess.getSUBTRACTAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSUBTRACTAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSUBTRACTAccess().getTargetVariableMAKECrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__ValOneAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
	ruleEXPRESSION{ after(grammarAccess.getSUBTRACTAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SUBTRACT__ValTwoAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUBTRACTAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
	ruleEXPRESSION{ after(grammarAccess.getSUBTRACTAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__TargetVariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getTargetVariableMAKECrossReference_1_0()); }
(
{ before(grammarAccess.getMULTIPLYAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getMULTIPLYAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getMULTIPLYAccess().getTargetVariableMAKECrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__ValOneAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
	ruleEXPRESSION{ after(grammarAccess.getMULTIPLYAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MULTIPLY__ValTwoAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMULTIPLYAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
	ruleEXPRESSION{ after(grammarAccess.getMULTIPLYAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__TargetVariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getTargetVariableMAKECrossReference_1_0()); }
(
{ before(grammarAccess.getDIVIDEAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDIVIDEAccess().getTargetVariableMAKEIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDIVIDEAccess().getTargetVariableMAKECrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__ValOneAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
	ruleEXPRESSION{ after(grammarAccess.getDIVIDEAccess().getValOneEXPRESSIONParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DIVIDE__ValTwoAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIVIDEAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
	ruleEXPRESSION{ after(grammarAccess.getDIVIDEAccess().getValTwoEXPRESSIONParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REPEAT__TimesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREPEATAccess().getTimesEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getREPEATAccess().getTimesEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REPEAT__CommandsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREPEATAccess().getCommandsSENTENCEParserRuleCall_2_0()); }
	ruleSENTENCE{ after(grammarAccess.getREPEATAccess().getCommandsSENTENCEParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TO__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTOAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTOAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TO__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTOAccess().getParametersPARAMParserRuleCall_2_0()); }
	rulePARAM{ after(grammarAccess.getTOAccess().getParametersPARAMParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TO__CommandsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTOAccess().getCommandsSENTENCEParserRuleCall_3_0()); }
	ruleSENTENCE{ after(grammarAccess.getTOAccess().getCommandsSENTENCEParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PARAM__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPARAMAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPARAMAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PROCEDURE_CALL__ToAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROCEDURE_CALLAccess().getToTOCrossReference_0_0()); }
(
{ before(grammarAccess.getPROCEDURE_CALLAccess().getToTOIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPROCEDURE_CALLAccess().getToTOIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPROCEDURE_CALLAccess().getToTOCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PROCEDURE_CALL__ParamsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROCEDURE_CALLAccess().getParamsEXPRESSIONParserRuleCall_1_0()); }
	ruleEXPRESSION{ after(grammarAccess.getPROCEDURE_CALLAccess().getParamsEXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IF_SENTENCE__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIF_SENTENCEAccess().getConditionBOOLEAN_EXPRESSIONParserRuleCall_1_0()); }
	ruleBOOLEAN_EXPRESSION{ after(grammarAccess.getIF_SENTENCEAccess().getConditionBOOLEAN_EXPRESSIONParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IF_SENTENCE__CommandsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIF_SENTENCEAccess().getCommandsSENTENCEParserRuleCall_2_0()); }
	ruleSENTENCE{ after(grammarAccess.getIF_SENTENCEAccess().getCommandsSENTENCEParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EQUALS__Op1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEQUALSAccess().getOp1EXPRESSIONParserRuleCall_0_0()); }
	ruleEXPRESSION{ after(grammarAccess.getEQUALSAccess().getOp1EXPRESSIONParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EQUALS__Op2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEQUALSAccess().getOp2EXPRESSIONParserRuleCall_2_0()); }
	ruleEXPRESSION{ after(grammarAccess.getEQUALSAccess().getOp2EXPRESSIONParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GREATER_THAN__Op1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGREATER_THANAccess().getOp1EXPRESSIONParserRuleCall_0_0()); }
	ruleEXPRESSION{ after(grammarAccess.getGREATER_THANAccess().getOp1EXPRESSIONParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GREATER_THAN__Op2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGREATER_THANAccess().getOp2EXPRESSIONParserRuleCall_2_0()); }
	ruleEXPRESSION{ after(grammarAccess.getGREATER_THANAccess().getOp2EXPRESSIONParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LESSER_THAN__Op1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLESSER_THANAccess().getOp1EXPRESSIONParserRuleCall_0_0()); }
	ruleEXPRESSION{ after(grammarAccess.getLESSER_THANAccess().getOp1EXPRESSIONParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LESSER_THAN__Op2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLESSER_THANAccess().getOp2EXPRESSIONParserRuleCall_2_0()); }
	ruleEXPRESSION{ after(grammarAccess.getLESSER_THANAccess().getOp2EXPRESSIONParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOUBLE : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


