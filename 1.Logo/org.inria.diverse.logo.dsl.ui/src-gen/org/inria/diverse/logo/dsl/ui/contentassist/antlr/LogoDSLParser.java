/*
 * generated by Xtext
 */
package org.inria.diverse.logo.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.inria.diverse.logo.dsl.services.LogoDSLGrammarAccess;

public class LogoDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private LogoDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.inria.diverse.logo.dsl.ui.contentassist.antlr.internal.InternalLogoDSLParser createParser() {
		org.inria.diverse.logo.dsl.ui.contentassist.antlr.internal.InternalLogoDSLParser result = new org.inria.diverse.logo.dsl.ui.contentassist.antlr.internal.InternalLogoDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSENTENCEAccess().getAlternatives(), "rule__SENTENCE__Alternatives");
					put(grammarAccess.getMOVEAccess().getAlternatives(), "rule__MOVE__Alternatives");
					put(grammarAccess.getDRAWING_SENTENCEAccess().getAlternatives(), "rule__DRAWING_SENTENCE__Alternatives");
					put(grammarAccess.getCOLOREABLEAccess().getAlternatives(), "rule__COLOREABLE__Alternatives");
					put(grammarAccess.getPENCOLORAccess().getAlternatives_1(), "rule__PENCOLOR__Alternatives_1");
					put(grammarAccess.getCANVAS_COLORAccess().getAlternatives_1(), "rule__CANVAS_COLOR__Alternatives_1");
					put(grammarAccess.getCOLORAccess().getAlternatives(), "rule__COLOR__Alternatives");
					put(grammarAccess.getFontStyleValuesAccess().getAlternatives(), "rule__FontStyleValues__Alternatives");
					put(grammarAccess.getREFERENCIABLEAccess().getAlternatives(), "rule__REFERENCIABLE__Alternatives");
					put(grammarAccess.getEXPRESSIONAccess().getAlternatives(), "rule__EXPRESSION__Alternatives");
					put(grammarAccess.getOPERATIONAccess().getAlternatives(), "rule__OPERATION__Alternatives");
					put(grammarAccess.getCONTROL_SENTENCESAccess().getAlternatives(), "rule__CONTROL_SENTENCES__Alternatives");
					put(grammarAccess.getBOOLEAN_EXPRESSIONAccess().getAlternatives(), "rule__BOOLEAN_EXPRESSION__Alternatives");
					put(grammarAccess.getFORWARDAccess().getGroup(), "rule__FORWARD__Group__0");
					put(grammarAccess.getLEFTAccess().getGroup(), "rule__LEFT__Group__0");
					put(grammarAccess.getRIGHTAccess().getGroup(), "rule__RIGHT__Group__0");
					put(grammarAccess.getSET_XAccess().getGroup(), "rule__SET_X__Group__0");
					put(grammarAccess.getSET_YAccess().getGroup(), "rule__SET_Y__Group__0");
					put(grammarAccess.getPENDOWNAccess().getGroup(), "rule__PENDOWN__Group__0");
					put(grammarAccess.getPENUPAccess().getGroup(), "rule__PENUP__Group__0");
					put(grammarAccess.getPENCOLORAccess().getGroup(), "rule__PENCOLOR__Group__0");
					put(grammarAccess.getCANVAS_COLORAccess().getGroup(), "rule__CANVAS_COLOR__Group__0");
					put(grammarAccess.getCOLOR_SPECAccess().getGroup(), "rule__COLOR_SPEC__Group__0");
					put(grammarAccess.getFONT_STYLEAccess().getGroup(), "rule__FONT_STYLE__Group__0");
					put(grammarAccess.getFontStyleValuesAccess().getGroup_0(), "rule__FontStyleValues__Group_0__0");
					put(grammarAccess.getFontStyleValuesAccess().getGroup_1(), "rule__FontStyleValues__Group_1__0");
					put(grammarAccess.getFontStyleValuesAccess().getGroup_2(), "rule__FontStyleValues__Group_2__0");
					put(grammarAccess.getCLEARAccess().getGroup(), "rule__CLEAR__Group__0");
					put(grammarAccess.getHOMEAccess().getGroup(), "rule__HOME__Group__0");
					put(grammarAccess.getDRAW_STRINGAccess().getGroup(), "rule__DRAW_STRING__Group__0");
					put(grammarAccess.getMAKEAccess().getGroup(), "rule__MAKE__Group__0");
					put(grammarAccess.getCONTENTAccess().getGroup(), "rule__CONTENT__Group__0");
					put(grammarAccess.getSUMAccess().getGroup(), "rule__SUM__Group__0");
					put(grammarAccess.getSUBTRACTAccess().getGroup(), "rule__SUBTRACT__Group__0");
					put(grammarAccess.getMULTIPLYAccess().getGroup(), "rule__MULTIPLY__Group__0");
					put(grammarAccess.getDIVIDEAccess().getGroup(), "rule__DIVIDE__Group__0");
					put(grammarAccess.getREPEATAccess().getGroup(), "rule__REPEAT__Group__0");
					put(grammarAccess.getTOAccess().getGroup(), "rule__TO__Group__0");
					put(grammarAccess.getPARAMAccess().getGroup(), "rule__PARAM__Group__0");
					put(grammarAccess.getPROCEDURE_CALLAccess().getGroup(), "rule__PROCEDURE_CALL__Group__0");
					put(grammarAccess.getIF_SENTENCEAccess().getGroup(), "rule__IF_SENTENCE__Group__0");
					put(grammarAccess.getEQUALSAccess().getGroup(), "rule__EQUALS__Group__0");
					put(grammarAccess.getGREATER_THANAccess().getGroup(), "rule__GREATER_THAN__Group__0");
					put(grammarAccess.getLESSER_THANAccess().getGroup(), "rule__LESSER_THAN__Group__0");
					put(grammarAccess.getLogoProgramAccess().getSentencesAssignment(), "rule__LogoProgram__SentencesAssignment");
					put(grammarAccess.getFORWARDAccess().getAmountAssignment_1(), "rule__FORWARD__AmountAssignment_1");
					put(grammarAccess.getLEFTAccess().getAmountAssignment_1(), "rule__LEFT__AmountAssignment_1");
					put(grammarAccess.getRIGHTAccess().getAmountAssignment_1(), "rule__RIGHT__AmountAssignment_1");
					put(grammarAccess.getSET_XAccess().getAmountAssignment_1(), "rule__SET_X__AmountAssignment_1");
					put(grammarAccess.getSET_YAccess().getAmountAssignment_1(), "rule__SET_Y__AmountAssignment_1");
					put(grammarAccess.getPENCOLORAccess().getColorAssignment_1_0(), "rule__PENCOLOR__ColorAssignment_1_0");
					put(grammarAccess.getPENCOLORAccess().getColorSpecAssignment_1_1(), "rule__PENCOLOR__ColorSpecAssignment_1_1");
					put(grammarAccess.getCANVAS_COLORAccess().getColorAssignment_1_0(), "rule__CANVAS_COLOR__ColorAssignment_1_0");
					put(grammarAccess.getCANVAS_COLORAccess().getColorSpecAssignment_1_1(), "rule__CANVAS_COLOR__ColorSpecAssignment_1_1");
					put(grammarAccess.getCOLOR_SPECAccess().getRedAssignment_0(), "rule__COLOR_SPEC__RedAssignment_0");
					put(grammarAccess.getCOLOR_SPECAccess().getGreenAssignment_1(), "rule__COLOR_SPEC__GreenAssignment_1");
					put(grammarAccess.getCOLOR_SPECAccess().getBlueAssignment_2(), "rule__COLOR_SPEC__BlueAssignment_2");
					put(grammarAccess.getCOLOR_SPECAccess().getAlphaAssignment_3(), "rule__COLOR_SPEC__AlphaAssignment_3");
					put(grammarAccess.getFONT_STYLEAccess().getStyleAssignment_1(), "rule__FONT_STYLE__StyleAssignment_1");
					put(grammarAccess.getDRAW_STRINGAccess().getTextAssignment_1(), "rule__DRAW_STRING__TextAssignment_1");
					put(grammarAccess.getMAKEAccess().getNameAssignment_1(), "rule__MAKE__NameAssignment_1");
					put(grammarAccess.getMAKEAccess().getValueAssignment_3(), "rule__MAKE__ValueAssignment_3");
					put(grammarAccess.getVARIABLE_REFAccess().getToVarAssignment(), "rule__VARIABLE_REF__ToVarAssignment");
					put(grammarAccess.getVALUEAccess().getValAssignment(), "rule__VALUE__ValAssignment");
					put(grammarAccess.getCONTENTAccess().getVarAssignment_1(), "rule__CONTENT__VarAssignment_1");
					put(grammarAccess.getSUMAccess().getTargetVariableAssignment_1(), "rule__SUM__TargetVariableAssignment_1");
					put(grammarAccess.getSUMAccess().getValOneAssignment_3(), "rule__SUM__ValOneAssignment_3");
					put(grammarAccess.getSUMAccess().getValTwoAssignment_5(), "rule__SUM__ValTwoAssignment_5");
					put(grammarAccess.getSUBTRACTAccess().getTargetVariableAssignment_1(), "rule__SUBTRACT__TargetVariableAssignment_1");
					put(grammarAccess.getSUBTRACTAccess().getValOneAssignment_3(), "rule__SUBTRACT__ValOneAssignment_3");
					put(grammarAccess.getSUBTRACTAccess().getValTwoAssignment_5(), "rule__SUBTRACT__ValTwoAssignment_5");
					put(grammarAccess.getMULTIPLYAccess().getTargetVariableAssignment_1(), "rule__MULTIPLY__TargetVariableAssignment_1");
					put(grammarAccess.getMULTIPLYAccess().getValOneAssignment_3(), "rule__MULTIPLY__ValOneAssignment_3");
					put(grammarAccess.getMULTIPLYAccess().getValTwoAssignment_5(), "rule__MULTIPLY__ValTwoAssignment_5");
					put(grammarAccess.getDIVIDEAccess().getTargetVariableAssignment_1(), "rule__DIVIDE__TargetVariableAssignment_1");
					put(grammarAccess.getDIVIDEAccess().getValOneAssignment_3(), "rule__DIVIDE__ValOneAssignment_3");
					put(grammarAccess.getDIVIDEAccess().getValTwoAssignment_5(), "rule__DIVIDE__ValTwoAssignment_5");
					put(grammarAccess.getREPEATAccess().getTimesAssignment_1(), "rule__REPEAT__TimesAssignment_1");
					put(grammarAccess.getREPEATAccess().getCommandsAssignment_2(), "rule__REPEAT__CommandsAssignment_2");
					put(grammarAccess.getTOAccess().getNameAssignment_1(), "rule__TO__NameAssignment_1");
					put(grammarAccess.getTOAccess().getParametersAssignment_2(), "rule__TO__ParametersAssignment_2");
					put(grammarAccess.getTOAccess().getCommandsAssignment_3(), "rule__TO__CommandsAssignment_3");
					put(grammarAccess.getPARAMAccess().getNameAssignment_1(), "rule__PARAM__NameAssignment_1");
					put(grammarAccess.getPROCEDURE_CALLAccess().getToAssignment_0(), "rule__PROCEDURE_CALL__ToAssignment_0");
					put(grammarAccess.getPROCEDURE_CALLAccess().getParamsAssignment_1(), "rule__PROCEDURE_CALL__ParamsAssignment_1");
					put(grammarAccess.getIF_SENTENCEAccess().getConditionAssignment_1(), "rule__IF_SENTENCE__ConditionAssignment_1");
					put(grammarAccess.getIF_SENTENCEAccess().getCommandsAssignment_2(), "rule__IF_SENTENCE__CommandsAssignment_2");
					put(grammarAccess.getEQUALSAccess().getOp1Assignment_0(), "rule__EQUALS__Op1Assignment_0");
					put(grammarAccess.getEQUALSAccess().getOp2Assignment_2(), "rule__EQUALS__Op2Assignment_2");
					put(grammarAccess.getGREATER_THANAccess().getOp1Assignment_0(), "rule__GREATER_THAN__Op1Assignment_0");
					put(grammarAccess.getGREATER_THANAccess().getOp2Assignment_2(), "rule__GREATER_THAN__Op2Assignment_2");
					put(grammarAccess.getLESSER_THANAccess().getOp1Assignment_0(), "rule__LESSER_THAN__Op1Assignment_0");
					put(grammarAccess.getLESSER_THANAccess().getOp2Assignment_2(), "rule__LESSER_THAN__Op2Assignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.inria.diverse.logo.dsl.ui.contentassist.antlr.internal.InternalLogoDSLParser typedParser = (org.inria.diverse.logo.dsl.ui.contentassist.antlr.internal.InternalLogoDSLParser) parser;
			typedParser.entryRuleLogoProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LogoDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LogoDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
